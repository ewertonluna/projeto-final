
projeto-final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e0c  08007e0c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  20000074  08007e88  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b0  08007e88  000212b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a4  00000000  00000000  0003d84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  000410f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00042928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af59  00000000  00000000  00044008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3a7  00000000  00000000  0006ef61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110814  00000000  00000000  0008a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ab1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069cc  00000000  00000000  0019ab6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cec 	.word	0x08007cec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007cec 	.word	0x08007cec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <sendChar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE BEGIN 0 */

void sendChar(unsigned char c, int uart_number){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]
	unsigned char pChar = c;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	73fb      	strb	r3, [r7, #15]
	if(uart_number == 1)
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d108      	bne.n	8000530 <sendChar+0x28>
		HAL_UART_Transmit(&huart1, &pChar,1 ,HAL_MAX_DELAY );
 800051e:	f107 010f 	add.w	r1, r7, #15
 8000522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000526:	2201      	movs	r2, #1
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <sendChar+0x48>)
 800052a:	f004 fefb 	bl	8005324 <HAL_UART_Transmit>
	else if(uart_number == 2)
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
}
 800052e:	e00a      	b.n	8000546 <sendChar+0x3e>
	else if(uart_number == 2)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d107      	bne.n	8000546 <sendChar+0x3e>
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
 8000536:	f107 010f 	add.w	r1, r7, #15
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053e:	2201      	movs	r2, #1
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <sendChar+0x4c>)
 8000542:	f004 feef 	bl	8005324 <HAL_UART_Transmit>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000440 	.word	0x20000440
 8000554:	200004c4 	.word	0x200004c4

08000558 <readChar>:
		HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
	else if(uart_number == 2)
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
}

char readChar(int uart_number){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	unsigned char caracter;

	if(uart_number == 1){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d10c      	bne.n	8000580 <readChar+0x28>
		while(HAL_UART_Receive(&huart1, &caracter, 1, HAL_MAX_DELAY) != HAL_OK);
 8000566:	bf00      	nop
 8000568:	f107 010f 	add.w	r1, r7, #15
 800056c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000570:	2201      	movs	r2, #1
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <readChar+0x50>)
 8000574:	f004 ff6a 	bl	800544c <HAL_UART_Receive>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f4      	bne.n	8000568 <readChar+0x10>
 800057e:	e00e      	b.n	800059e <readChar+0x46>
	}
	else if(uart_number == 2){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d10b      	bne.n	800059e <readChar+0x46>
		while(HAL_UART_Receive(&huart2, &caracter, 1, HAL_MAX_DELAY) != HAL_OK);
 8000586:	bf00      	nop
 8000588:	f107 010f 	add.w	r1, r7, #15
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000590:	2201      	movs	r2, #1
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <readChar+0x54>)
 8000594:	f004 ff5a 	bl	800544c <HAL_UART_Receive>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1f4      	bne.n	8000588 <readChar+0x30>
	}
	return caracter;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000440 	.word	0x20000440
 80005ac:	200004c4 	.word	0x200004c4

080005b0 <recebe_da_node_mcu>:

void recebe_da_node_mcu(void *vParam){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	unsigned char caracter;
	while(1){
		//Aguarda receber um caracter da UART1 que esta conectada ao Node MCU
		caracter = readChar(1);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff ffcd 	bl	8000558 <readChar>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
		if (caracter == '1') {
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	2b31      	cmp	r3, #49	; 0x31
 80005c6:	d105      	bne.n	80005d4 <recebe_da_node_mcu+0x24>
//				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //verde
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <recebe_da_node_mcu+0x38>)
 80005ce:	f002 f8c5 	bl	800275c <HAL_GPIO_WritePin>
 80005d2:	e004      	b.n	80005de <recebe_da_node_mcu+0x2e>
			//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
			//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //azul
		} else {
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //verde
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <recebe_da_node_mcu+0x38>)
 80005da:	f002 f8bf 	bl	800275c <HAL_GPIO_WritePin>
		}
		//Envia o caracter recebido para a UART 2 que está conectada ao terminal serial
//		sendChar(caracter, 2);
		vTaskDelay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f006 fafa 	bl	8006bd8 <vTaskDelay>
		caracter = readChar(1);
 80005e4:	e7e8      	b.n	80005b8 <recebe_da_node_mcu+0x8>
 80005e6:	bf00      	nop
 80005e8:	48000800 	.word	0x48000800

080005ec <envia_para_node_mcu>:
	}
}

void envia_para_node_mcu( void *vParam){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	unsigned char caracter;

	while(1){
		//Aguarda receber um carcater do terminal serial
		caracter = readChar(2);
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff ffaf 	bl	8000558 <readChar>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
		//Envia o caracter para a UART 1 que está conectada a placa NodemCU
		sendChar(caracter, 1);
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2101      	movs	r1, #1
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff80 	bl	8000508 <sendChar>
		vTaskDelay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f006 fae5 	bl	8006bd8 <vTaskDelay>
		caracter = readChar(2);
 800060e:	e7f1      	b.n	80005f4 <envia_para_node_mcu+0x8>

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fdad 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f853 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 fa55 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000622:	f000 fa23 	bl	8000a6c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000626:	f000 f89f 	bl	8000768 <MX_ADC1_Init>
  MX_TIM2_Init();
 800062a:	f000 f913 	bl	8000854 <MX_TIM2_Init>
  MX_TIM3_Init();
 800062e:	f000 f95f 	bl	80008f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000632:	f000 f9eb 	bl	8000a0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000636:	481b      	ldr	r0, [pc, #108]	; (80006a4 <main+0x94>)
 8000638:	f003 fc52 	bl	8003ee0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800063c:	2104      	movs	r1, #4
 800063e:	481a      	ldr	r0, [pc, #104]	; (80006a8 <main+0x98>)
 8000640:	f003 fd20 	bl	8004084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <main+0x98>)
 8000648:	f003 fd1c 	bl	8004084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800064c:	2108      	movs	r1, #8
 800064e:	4816      	ldr	r0, [pc, #88]	; (80006a8 <main+0x98>)
 8000650:	f003 fd18 	bl	8004084 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0x9c>)
 8000656:	1d3c      	adds	r4, r7, #4
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fff5 	bl	800665a <osThreadCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <main+0xa0>)
 8000674:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  xTaskCreate(recebe_da_node_mcu,
 8000676:	2300      	movs	r3, #0
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2300      	movs	r3, #0
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	490c      	ldr	r1, [pc, #48]	; (80006b4 <main+0xa4>)
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0xa8>)
 8000686:	f006 f959 	bl	800693c <xTaskCreate>
		  /* tamanho da pilha da task */
		  NULL, /* parametro para a task */
		  tskIDLE_PRIORITY, /* nivel de prioridade */
		  NULL); /* ponteiro para o handle da task */

  xTaskCreate(envia_para_node_mcu, /* Nome da funcao que executa a task */
 800068a:	2300      	movs	r3, #0
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2300      	movs	r3, #0
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	4909      	ldr	r1, [pc, #36]	; (80006bc <main+0xac>)
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <main+0xb0>)
 800069a:	f006 f94f 	bl	800693c <xTaskCreate>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f005 ffd5 	bl	800664c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x92>
 80006a4:	200003f4 	.word	0x200003f4
 80006a8:	200003a8 	.word	0x200003a8
 80006ac:	08007d38 	.word	0x08007d38
 80006b0:	20000548 	.word	0x20000548
 80006b4:	08007d10 	.word	0x08007d10
 80006b8:	080005b1 	.word	0x080005b1
 80006bc:	08007d24 	.word	0x08007d24
 80006c0:	080005ed 	.word	0x080005ed

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 fa40 	bl	8007b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	f002 f85d 	bl	80027a8 <HAL_PWREx_ControlVoltageScaling>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f4:	f000 fa94 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	2310      	movs	r3, #16
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000712:	230a      	movs	r3, #10
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f894 	bl	8002854 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000732:	f000 fa75 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2104      	movs	r1, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fc5c 	bl	800300c <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 fa61 	bl	8000c20 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3758      	adds	r7, #88	; 0x58
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <MX_ADC1_Init+0xe0>)
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <MX_ADC1_Init+0xe4>)
 800078e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_ADC1_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000796:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <MX_ADC1_Init+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_ADC1_Init+0xe0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007bc:	2201      	movs	r2, #1
 80007be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <MX_ADC1_Init+0xe0>)
 80007ec:	f000 fe8e 	bl	800150c <HAL_ADC_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007f6:	f000 fa13 	bl	8000c20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	4810      	ldr	r0, [pc, #64]	; (8000848 <MX_ADC1_Init+0xe0>)
 8000806:	f001 fbed 	bl	8001fe4 <HAL_ADCEx_MultiModeConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000810:	f000 fa06 	bl	8000c20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_ADC1_Init+0xe8>)
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	2306      	movs	r3, #6
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000820:	237f      	movs	r3, #127	; 0x7f
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000824:	2304      	movs	r3, #4
 8000826:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC1_Init+0xe0>)
 8000832:	f000 ffc1 	bl	80017b8 <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800083c:	f000 f9f0 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000344 	.word	0x20000344
 800084c:	50040000 	.word	0x50040000
 8000850:	14f00020 	.word	0x14f00020

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_TIM2_Init+0x98>)
 8000874:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000878:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_TIM2_Init+0x98>)
 800087c:	f240 128f 	movw	r2, #399	; 0x18f
 8000880:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_TIM2_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_TIM2_Init+0x98>)
 800088a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_TIM2_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM2_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <MX_TIM2_Init+0x98>)
 800089e:	f003 fac7 	bl	8003e30 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f9ba 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_TIM2_Init+0x98>)
 80008ba:	f003 ff1d 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008c4:	f000 f9ac 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_TIM2_Init+0x98>)
 80008d6:	f004 fc31 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 f99e 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200003a8 	.word	0x200003a8

080008f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000922:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000924:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <MX_TIM3_Init+0x118>)
 8000926:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 400-1;
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <MX_TIM3_Init+0x114>)
 800092a:	f240 128f 	movw	r2, #399	; 0x18f
 800092e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000936:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000938:	f242 720f 	movw	r2, #9999	; 0x270f
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094a:	482e      	ldr	r0, [pc, #184]	; (8000a04 <MX_TIM3_Init+0x114>)
 800094c:	f003 fa70 	bl	8003e30 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f963 	bl	8000c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000964:	4619      	mov	r1, r3
 8000966:	4827      	ldr	r0, [pc, #156]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000968:	f003 fec6 	bl	80046f8 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000972:	f000 f955 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000978:	f003 fb22 	bl	8003fc0 <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000982:	f000 f94d 	bl	8000c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481b      	ldr	r0, [pc, #108]	; (8000a04 <MX_TIM3_Init+0x114>)
 8000996:	f004 fbd1 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80009a0:	f000 f93e 	bl	8000c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	; 0x60
 80009a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <MX_TIM3_Init+0x114>)
 80009bc:	f003 fd88 	bl	80044d0 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80009c6:	f000 f92b 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	2204      	movs	r2, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM3_Init+0x114>)
 80009d2:	f003 fd7d 	bl	80044d0 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80009dc:	f000 f920 	bl	8000c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	2208      	movs	r2, #8
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_TIM3_Init+0x114>)
 80009e8:	f003 fd72 	bl	80044d0 <HAL_TIM_PWM_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80009f2:	f000 f915 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM3_Init+0x114>)
 80009f8:	f000 f9e0 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 80009fc:	bf00      	nop
 80009fe:	3738      	adds	r7, #56	; 0x38
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200003f4 	.word	0x200003f4
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <MX_USART1_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a50:	f004 fc1a 	bl	8005288 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 f8e1 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000440 	.word	0x20000440
 8000a68:	40013800 	.word	0x40013800

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART2_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	f004 fbea 	bl	8005288 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f8b1 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200004c4 	.word	0x200004c4
 8000ac8:	40004400 	.word	0x40004400

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a38      	ldr	r2, [pc, #224]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_GPIO_Init+0x114>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f001 fe07 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000b54:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_GPIO_Init+0x118>)
 8000b56:	f001 fe01 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	4822      	ldr	r0, [pc, #136]	; (8000be8 <MX_GPIO_Init+0x11c>)
 8000b60:	f001 fdfc 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481b      	ldr	r0, [pc, #108]	; (8000be8 <MX_GPIO_Init+0x11c>)
 8000b7c:	f001 fc44 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b80:	2320      	movs	r3, #32
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f001 fc35 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8000b9e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480b      	ldr	r0, [pc, #44]	; (8000be4 <MX_GPIO_Init+0x118>)
 8000bb8:	f001 fc26 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_GPIO_Init+0x11c>)
 8000bd4:	f001 fc18 	bl	8002408 <HAL_GPIO_Init>

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800

08000bec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f005 fd7c 	bl	80066f2 <osDelay>
 8000bfa:	e7fb      	b.n	8000bf4 <StartDefaultTask+0x8>

08000bfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c0e:	f000 fad1 	bl	80011b4 <HAL_IncTick>
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //azul

  }
  /* USER CODE END Callback 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012c00 	.word	0x40012c00

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x4c>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	210f      	movs	r1, #15
 8000c66:	f06f 0001 	mvn.w	r0, #1
 8000c6a:	f001 fb23 	bl	80022b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ac      	sub	sp, #176	; 0xb0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2288      	movs	r2, #136	; 0x88
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 ff5b 	bl	8007b58 <memset>
  if(hadc->Instance==ADC1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a27      	ldr	r2, [pc, #156]	; (8000d44 <HAL_ADC_MspInit+0xc8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d147      	bne.n	8000d3c <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fbeb 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ce8:	f7ff ff9a 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_ADC_MspInit+0xcc>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_ADC_MspInit+0xcc>)
 8000cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_ADC_MspInit+0xcc>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_ADC_MspInit+0xcc>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_ADC_MspInit+0xcc>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_ADC_MspInit+0xcc>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d22:	230b      	movs	r3, #11
 8000d24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f001 fb66 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	37b0      	adds	r7, #176	; 0xb0
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	50040000 	.word	0x50040000
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d5c:	d10c      	bne.n	8000d78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d76:	e018      	b.n	8000daa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_TIM_Base_MspInit+0x6c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d113      	bne.n	8000daa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x68>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	201d      	movs	r0, #29
 8000da0:	f001 fa88 	bl	80022b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000da4:	201d      	movs	r0, #29
 8000da6:	f001 faa1 	bl	80022ec <HAL_NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40000400 	.word	0x40000400

08000dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <HAL_TIM_MspPostInit+0x9c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d138      	bne.n	8000e50 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_TIM_MspPostInit+0xa0>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <HAL_TIM_MspPostInit+0xa0>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_TIM_MspPostInit+0xa0>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_TIM_MspPostInit+0xa0>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <HAL_TIM_MspPostInit+0xa0>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_TIM_MspPostInit+0xa0>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0e:	23c0      	movs	r3, #192	; 0xc0
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f001 faec 	bl	8002408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e30:	2301      	movs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e40:	2302      	movs	r3, #2
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_TIM_MspPostInit+0xa4>)
 8000e4c:	f001 fadc 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40000400 	.word	0x40000400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	48000400 	.word	0x48000400

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0ae      	sub	sp, #184	; 0xb8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	2288      	movs	r2, #136	; 0x88
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 fe67 	bl	8007b58 <memset>
  if(huart->Instance==USART1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a47      	ldr	r2, [pc, #284]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d13d      	bne.n	8000f10 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 fb09 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eac:	f7ff feb8 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb4:	4a3e      	ldr	r2, [pc, #248]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eba:	6613      	str	r3, [r2, #96]	; 0x60
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ee0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000efa:	2307      	movs	r3, #7
 8000efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f001 fa7d 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f0e:	e048      	b.n	8000fa2 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a27      	ldr	r2, [pc, #156]	; (8000fb4 <HAL_UART_MspInit+0x150>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d143      	bne.n	8000fa2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fac6 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000f32:	f7ff fe75 	bl	8000c20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	6593      	str	r3, [r2, #88]	; 0x58
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f66:	230c      	movs	r3, #12
 8000f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8e:	f001 fa3b 	bl	8002408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2105      	movs	r1, #5
 8000f96:	2026      	movs	r0, #38	; 0x26
 8000f98:	f001 f98c 	bl	80022b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f9c:	2026      	movs	r0, #38	; 0x26
 8000f9e:	f001 f9a5 	bl	80022ec <HAL_NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	37b8      	adds	r7, #184	; 0xb8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013800 	.word	0x40013800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <HAL_InitTick+0xc8>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	4a2d      	ldr	r2, [pc, #180]	; (8001080 <HAL_InitTick+0xc8>)
 8000fcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_InitTick+0xc8>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 f9d3 	bl	8003394 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fee:	f002 f9bb 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8000ff2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	4a23      	ldr	r2, [pc, #140]	; (8001084 <HAL_InitTick+0xcc>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	0c9b      	lsrs	r3, r3, #18
 8000ffe:	3b01      	subs	r3, #1
 8001000:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_InitTick+0xd0>)
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <HAL_InitTick+0xd4>)
 8001006:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_InitTick+0xd0>)
 800100a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800100e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_InitTick+0xd0>)
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_InitTick+0xd0>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_InitTick+0xd0>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_InitTick+0xd0>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <HAL_InitTick+0xd0>)
 800102a:	f002 ff01 	bl	8003e30 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001038:	2b00      	cmp	r3, #0
 800103a:	d11b      	bne.n	8001074 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <HAL_InitTick+0xd0>)
 800103e:	f002 ff4f 	bl	8003ee0 <HAL_TIM_Base_Start_IT>
 8001042:	4603      	mov	r3, r0
 8001044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800104c:	2b00      	cmp	r3, #0
 800104e:	d111      	bne.n	8001074 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001050:	2019      	movs	r0, #25
 8001052:	f001 f94b 	bl	80022ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d808      	bhi.n	800106e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	2019      	movs	r0, #25
 8001062:	f001 f927 	bl	80022b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_InitTick+0xd8>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	e002      	b.n	8001074 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001078:	4618      	mov	r0, r3
 800107a:	3730      	adds	r7, #48	; 0x30
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	431bde83 	.word	0x431bde83
 8001088:	2000054c 	.word	0x2000054c
 800108c:	40012c00 	.word	0x40012c00
 8001090:	20000004 	.word	0x20000004

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80010c6:	f003 f8e3 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000054c 	.word	0x2000054c

080010d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM3_IRQHandler+0x10>)
 80010da:	f003 f8d9 	bl	8004290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200003f4 	.word	0x200003f4

080010e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <USART2_IRQHandler+0x10>)
 80010ee:	f004 fa7f 	bl	80055f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200004c4 	.word	0x200004c4

080010fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001124:	f7ff ffea 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f006 fcdd 	bl	8007b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001152:	f7ff fa5d 	bl	8000610 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001158:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001164:	08007e14 	.word	0x08007e14
  ldr r2, =_sbss
 8001168:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800116c:	200012b0 	.word	0x200012b0

08001170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_2_IRQHandler>
	...

08001174 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_Init+0x3c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_Init+0x3c>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118a:	2003      	movs	r0, #3
 800118c:	f001 f887 	bl	800229e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001190:	200f      	movs	r0, #15
 8001192:	f7ff ff11 	bl	8000fb8 <HAL_InitTick>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	e001      	b.n	80011a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a2:	f7ff fd43 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000598 	.word	0x20000598

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000598 	.word	0x20000598

080011f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3360      	adds	r3, #96	; 0x60
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <LL_ADC_SetOffset+0x44>)
 800127e:	4013      	ands	r3, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	4313      	orrs	r3, r2
 800128c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001294:	bf00      	nop
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	03fff000 	.word	0x03fff000

080012a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3360      	adds	r3, #96	; 0x60
 80012b2:	461a      	mov	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3360      	adds	r3, #96	; 0x60
 80012e0:	461a      	mov	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001306:	b480      	push	{r7}
 8001308:	b087      	sub	sp, #28
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3330      	adds	r3, #48	; 0x30
 8001316:	461a      	mov	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	4413      	add	r3, r2
 8001324:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	211f      	movs	r1, #31
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	401a      	ands	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0e9b      	lsrs	r3, r3, #26
 800133e:	f003 011f 	and.w	r1, r3, #31
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	431a      	orrs	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001352:	bf00      	nop
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800135e:	b480      	push	{r7}
 8001360:	b087      	sub	sp, #28
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3314      	adds	r3, #20
 800136e:	461a      	mov	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	0e5b      	lsrs	r3, r3, #25
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0d1b      	lsrs	r3, r3, #20
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	2107      	movs	r1, #7
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	0d1b      	lsrs	r3, r3, #20
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	431a      	orrs	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0318 	and.w	r3, r3, #24
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013d8:	40d9      	lsrs	r1, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	400b      	ands	r3, r1
 80013de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e2:	431a      	orrs	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	0007ffff 	.word	0x0007ffff

080013fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800140c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6093      	str	r3, [r2, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001484:	d101      	bne.n	800148a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <LL_ADC_IsEnabled+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_ADC_IsEnabled+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d101      	bne.n	80014fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e136      	b.n	8001794 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fba1 	bl	8000c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff67 	bl	8001420 <LL_ADC_IsDeepPowerDownEnabled>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff4d 	bl	80013fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff82 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d115      	bne.n	800159e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff66 	bl	8001448 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800157c:	4b87      	ldr	r3, [pc, #540]	; (800179c <HAL_ADC_Init+0x290>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	4a87      	ldr	r2, [pc, #540]	; (80017a0 <HAL_ADC_Init+0x294>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	3301      	adds	r3, #1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001590:	e002      	b.n	8001598 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3b01      	subs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f9      	bne.n	8001592 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff64 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b2:	f043 0210 	orr.w	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff75 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80015d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 80cf 	bne.w	8001782 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 80cb 	bne.w	8001782 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015f4:	f043 0202 	orr.w	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff49 	bl	8001498 <LL_ADC_IsEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d115      	bne.n	8001638 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800160c:	4865      	ldr	r0, [pc, #404]	; (80017a4 <HAL_ADC_Init+0x298>)
 800160e:	f7ff ff43 	bl	8001498 <LL_ADC_IsEnabled>
 8001612:	4604      	mov	r4, r0
 8001614:	4864      	ldr	r0, [pc, #400]	; (80017a8 <HAL_ADC_Init+0x29c>)
 8001616:	f7ff ff3f 	bl	8001498 <LL_ADC_IsEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	431c      	orrs	r4, r3
 800161e:	4863      	ldr	r0, [pc, #396]	; (80017ac <HAL_ADC_Init+0x2a0>)
 8001620:	f7ff ff3a 	bl	8001498 <LL_ADC_IsEnabled>
 8001624:	4603      	mov	r3, r0
 8001626:	4323      	orrs	r3, r4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4619      	mov	r1, r3
 8001632:	485f      	ldr	r0, [pc, #380]	; (80017b0 <HAL_ADC_Init+0x2a4>)
 8001634:	f7ff fdde 	bl	80011f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e5b      	ldrb	r3, [r3, #25]
 800163c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001642:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001648:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800164e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001656:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d106      	bne.n	8001674 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	3b01      	subs	r3, #1
 800166c:	045b      	lsls	r3, r3, #17
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_ADC_Init+0x2a8>)
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff08 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80016ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff15 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 80016ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d13d      	bne.n	800173e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d13a      	bne.n	800173e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e4:	f023 0302 	bic.w	r3, r3, #2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	69b9      	ldr	r1, [r7, #24]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d118      	bne.n	800172e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001706:	f023 0304 	bic.w	r3, r3, #4
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001712:	4311      	orrs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800171e:	430a      	orrs	r2, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	e007      	b.n	800173e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0201 	bic.w	r2, r2, #1
 800173c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10c      	bne.n	8001760 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	f023 010f 	bic.w	r1, r3, #15
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
 800175e:	e007      	b.n	8001770 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020f 	bic.w	r2, r2, #15
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001774:	f023 0303 	bic.w	r3, r3, #3
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
 8001780:	e007      	b.n	8001792 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001792:	7ffb      	ldrb	r3, [r7, #31]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3724      	adds	r7, #36	; 0x24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	053e2d63 	.word	0x053e2d63
 80017a4:	50040000 	.word	0x50040000
 80017a8:	50040100 	.word	0x50040100
 80017ac:	50040200 	.word	0x50040200
 80017b0:	50040300 	.word	0x50040300
 80017b4:	fff0c007 	.word	0xfff0c007

080017b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0b6      	sub	sp, #216	; 0xd8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_ConfigChannel+0x22>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e3c7      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x7b2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fe69 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 83a8 	bne.w	8001f44 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d824      	bhi.n	8001846 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	3b02      	subs	r3, #2
 8001802:	2b03      	cmp	r3, #3
 8001804:	d81b      	bhi.n	800183e <HAL_ADC_ConfigChannel+0x86>
 8001806:	a201      	add	r2, pc, #4	; (adr r2, 800180c <HAL_ADC_ConfigChannel+0x54>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	0800181d 	.word	0x0800181d
 8001810:	08001825 	.word	0x08001825
 8001814:	0800182d 	.word	0x0800182d
 8001818:	08001835 	.word	0x08001835
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	220c      	movs	r2, #12
 8001820:	605a      	str	r2, [r3, #4]
          break;
 8001822:	e011      	b.n	8001848 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2212      	movs	r2, #18
 8001828:	605a      	str	r2, [r3, #4]
          break;
 800182a:	e00d      	b.n	8001848 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2218      	movs	r2, #24
 8001830:	605a      	str	r2, [r3, #4]
          break;
 8001832:	e009      	b.n	8001848 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183a:	605a      	str	r2, [r3, #4]
          break;
 800183c:	e004      	b.n	8001848 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2206      	movs	r2, #6
 8001842:	605a      	str	r2, [r3, #4]
          break;
 8001844:	e000      	b.n	8001848 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001846:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	f7ff fd56 	bl	8001306 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fe2d 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 8001864:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe39 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 8001872:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001876:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 81a6 	bne.w	8001bcc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 81a1 	bne.w	8001bcc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	461a      	mov	r2, r3
 8001898:	f7ff fd61 	bl	800135e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	08db      	lsrs	r3, r3, #3
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d00a      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018ce:	f7ff fcc5 	bl	800125c <LL_ADC_SetOffset>
 80018d2:	e17b      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fce2 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x148>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fcd7 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	0e9b      	lsrs	r3, r3, #26
 80018fa:	f003 021f 	and.w	r2, r3, #31
 80018fe:	e01e      	b.n	800193e <HAL_ADC_ConfigChannel+0x186>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fccc 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001922:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001926:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800192e:	2320      	movs	r3, #32
 8001930:	e004      	b.n	800193c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001932:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0e9b      	lsrs	r3, r3, #26
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	e018      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1d0>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800196a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800196e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e004      	b.n	8001988 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800197e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001988:	429a      	cmp	r2, r3
 800198a:	d106      	bne.n	800199a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fc9b 	bl	80012d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fc7f 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x20e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fc74 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	e01e      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x24c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2101      	movs	r1, #1
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fc69 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80019f4:	2320      	movs	r3, #32
 80019f6:	e004      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80019f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x264>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0e9b      	lsrs	r3, r3, #26
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	e018      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x296>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e004      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d106      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fc38 	bl	80012d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2102      	movs	r1, #2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fc1c 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x2d4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fc11 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 021f 	and.w	r2, r3, #31
 8001a8a:	e01e      	b.n	8001aca <HAL_ADC_ConfigChannel+0x312>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fc06 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001aaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e004      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x32a>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	e016      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x358>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001af4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b02:	2320      	movs	r3, #32
 8001b04:	e004      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d106      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fbd7 	bl	80012d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2103      	movs	r1, #3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fbbb 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x396>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2103      	movs	r1, #3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fbb0 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	e017      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x3c6>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2103      	movs	r1, #3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fba5 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b68:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e003      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x3de>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	e011      	b.n	8001bba <HAL_ADC_ConfigChannel+0x402>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e003      	b.n	8001bba <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d106      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fb82 	bl	80012d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fc61 	bl	8001498 <LL_ADC_IsEnabled>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f040 813f 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	461a      	mov	r2, r3
 8001bec:	f7ff fbe2 	bl	80013b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a8e      	ldr	r2, [pc, #568]	; (8001e30 <HAL_ADC_ConfigChannel+0x678>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	f040 8130 	bne.w	8001e5c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10b      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x46c>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0e9b      	lsrs	r3, r3, #26
 8001c12:	3301      	adds	r3, #1
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	bf94      	ite	ls
 8001c1c:	2301      	movls	r3, #1
 8001c1e:	2300      	movhi	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e019      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x4a0>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c34:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e003      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	bf94      	ite	ls
 8001c52:	2301      	movls	r3, #1
 8001c54:	2300      	movhi	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d079      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x4c0>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	3301      	adds	r3, #1
 8001c70:	069b      	lsls	r3, r3, #26
 8001c72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c76:	e015      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x4ec>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c88:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e003      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	069b      	lsls	r3, r3, #26
 8001ca0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x50c>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	e017      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x53c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	e003      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	ea42 0103 	orr.w	r1, r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x562>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	051b      	lsls	r3, r3, #20
 8001d18:	e018      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x594>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e003      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	e080      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d107      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x5b4>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	3301      	adds	r3, #1
 8001d64:	069b      	lsls	r3, r3, #26
 8001d66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d6a:	e015      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x5e0>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d84:	2320      	movs	r3, #32
 8001d86:	e003      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	069b      	lsls	r3, r3, #26
 8001d94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x600>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	3301      	adds	r3, #1
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	e017      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x630>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	61fb      	str	r3, [r7, #28]
  return result;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e003      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	ea42 0103 	orr.w	r1, r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10d      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x65c>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b1e      	subs	r3, #30
 8001e0c:	051b      	lsls	r3, r3, #20
 8001e0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e12:	e01d      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x698>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	613b      	str	r3, [r7, #16]
  return result;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	e005      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x684>
 8001e30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	051b      	lsls	r3, r3, #20
 8001e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e50:	430b      	orrs	r3, r1
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6892      	ldr	r2, [r2, #8]
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7ff fa81 	bl	800135e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d07a      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e68:	4843      	ldr	r0, [pc, #268]	; (8001f78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e6a:	f7ff f9e9 	bl	8001240 <LL_ADC_GetCommonPathInternalCh>
 8001e6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a41      	ldr	r2, [pc, #260]	; (8001f7c <HAL_ADC_ConfigChannel+0x7c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d12c      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d126      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	; (8001f80 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x6e4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a3b      	ldr	r2, [pc, #236]	; (8001f84 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d15d      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4834      	ldr	r0, [pc, #208]	; (8001f78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ea8:	f7ff f9b7 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_ADC_ConfigChannel+0x7d0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <HAL_ADC_ConfigChannel+0x7d4>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ed4:	e040      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a2d      	ldr	r2, [pc, #180]	; (8001f90 <HAL_ADC_ConfigChannel+0x7d8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d118      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x75a>
 8001ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d112      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0x748>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <HAL_ADC_ConfigChannel+0x7cc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d12d      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481b      	ldr	r0, [pc, #108]	; (8001f78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f0c:	f7ff f985 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f10:	e024      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d120      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11a      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d115      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480e      	ldr	r0, [pc, #56]	; (8001f78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f3e:	f7ff f96c 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
 8001f42:	e00c      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f56:	e002      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	37d8      	adds	r7, #216	; 0xd8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	80080000 	.word	0x80080000
 8001f78:	50040300 	.word	0x50040300
 8001f7c:	c7520000 	.word	0xc7520000
 8001f80:	50040000 	.word	0x50040000
 8001f84:	50040200 	.word	0x50040200
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	053e2d63 	.word	0x053e2d63
 8001f90:	cb840000 	.word	0xcb840000
 8001f94:	80000001 	.word	0x80000001

08001f98 <LL_ADC_IsEnabled>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <LL_ADC_IsEnabled+0x18>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <LL_ADC_IsEnabled+0x1a>
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_ADC_REG_IsConversionOngoing>:
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d101      	bne.n	8001fd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b09f      	sub	sp, #124	; 0x7c
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e093      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800200a:	2300      	movs	r3, #0
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800200e:	2300      	movs	r3, #0
 8002010:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d102      	bne.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	e001      	b.n	8002026 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e072      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffb9 	bl	8001fbe <LL_ADC_REG_IsConversionOngoing>
 800204c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffb3 	bl	8001fbe <LL_ADC_REG_IsConversionOngoing>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d154      	bne.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800205e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002060:	2b00      	cmp	r3, #0
 8002062:	d151      	bne.n	8002108 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002066:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02c      	beq.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002082:	035b      	lsls	r3, r3, #13
 8002084:	430b      	orrs	r3, r1
 8002086:	431a      	orrs	r2, r3
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800208c:	4829      	ldr	r0, [pc, #164]	; (8002134 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800208e:	f7ff ff83 	bl	8001f98 <LL_ADC_IsEnabled>
 8002092:	4604      	mov	r4, r0
 8002094:	4828      	ldr	r0, [pc, #160]	; (8002138 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002096:	f7ff ff7f 	bl	8001f98 <LL_ADC_IsEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	431c      	orrs	r4, r3
 800209e:	4828      	ldr	r0, [pc, #160]	; (8002140 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020a0:	f7ff ff7a 	bl	8001f98 <LL_ADC_IsEnabled>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4323      	orrs	r3, r4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d137      	bne.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020b4:	f023 030f 	bic.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	6811      	ldr	r1, [r2, #0]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	6892      	ldr	r2, [r2, #8]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020c8:	e028      	b.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d6:	4817      	ldr	r0, [pc, #92]	; (8002134 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020d8:	f7ff ff5e 	bl	8001f98 <LL_ADC_IsEnabled>
 80020dc:	4604      	mov	r4, r0
 80020de:	4816      	ldr	r0, [pc, #88]	; (8002138 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020e0:	f7ff ff5a 	bl	8001f98 <LL_ADC_IsEnabled>
 80020e4:	4603      	mov	r3, r0
 80020e6:	431c      	orrs	r4, r3
 80020e8:	4815      	ldr	r0, [pc, #84]	; (8002140 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020ea:	f7ff ff55 	bl	8001f98 <LL_ADC_IsEnabled>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4323      	orrs	r3, r4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d112      	bne.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020fe:	f023 030f 	bic.w	r3, r3, #15
 8002102:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002104:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002106:	e009      	b.n	800211c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800211a:	e000      	b.n	800211e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800211c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002126:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800212a:	4618      	mov	r0, r3
 800212c:	377c      	adds	r7, #124	; 0x7c
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}
 8002132:	bf00      	nop
 8002134:	50040000 	.word	0x50040000
 8002138:	50040100 	.word	0x50040100
 800213c:	50040300 	.word	0x50040300
 8002140:	50040200 	.word	0x50040200

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff4c 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022c6:	f7ff ff61 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f7ff ffb1 	bl	8002238 <NVIC_EncodePriority>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff80 	bl	80021e4 <__NVIC_SetPriority>
}
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff54 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d008      	beq.n	8002332 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2204      	movs	r2, #4
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e022      	b.n	8002378 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 020e 	bic.w	r2, r2, #14
 8002340:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 021c 	and.w	r2, r3, #28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2101      	movs	r1, #1
 8002360:	fa01 f202 	lsl.w	r2, r1, r2
 8002364:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d005      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2204      	movs	r2, #4
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e029      	b.n	80023fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 020e 	bic.w	r2, r2, #14
 80023b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f003 021c 	and.w	r2, r3, #28
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
    }
  }
  return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002416:	e17f      	b.n	8002718 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8171 	beq.w	8002712 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d005      	beq.n	8002448 <HAL_GPIO_Init+0x40>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d130      	bne.n	80024aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800247e:	2201      	movs	r2, #1
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 0201 	and.w	r2, r3, #1
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d118      	bne.n	80024e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024bc:	2201      	movs	r2, #1
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	f003 0201 	and.w	r2, r3, #1
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d017      	beq.n	8002524 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d123      	bne.n	8002578 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	6939      	ldr	r1, [r7, #16]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0203 	and.w	r2, r3, #3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80ac 	beq.w	8002712 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <HAL_GPIO_Init+0x330>)
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	4a5e      	ldr	r2, [pc, #376]	; (8002738 <HAL_GPIO_Init+0x330>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6613      	str	r3, [r2, #96]	; 0x60
 80025c6:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_GPIO_Init+0x330>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d2:	4a5a      	ldr	r2, [pc, #360]	; (800273c <HAL_GPIO_Init+0x334>)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x242>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_GPIO_Init+0x338>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x23e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4e      	ldr	r2, [pc, #312]	; (8002744 <HAL_GPIO_Init+0x33c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x23a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_GPIO_Init+0x340>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x236>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4c      	ldr	r2, [pc, #304]	; (800274c <HAL_GPIO_Init+0x344>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x232>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_GPIO_Init+0x348>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x22e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_GPIO_Init+0x34c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x22a>
 800262e:	2306      	movs	r3, #6
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x244>
 8002632:	2307      	movs	r3, #7
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x244>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x244>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x244>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x244>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x244>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x244>
 800264a:	2300      	movs	r3, #0
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800265c:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_GPIO_Init+0x334>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_GPIO_Init+0x350>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800268e:	4a32      	ldr	r2, [pc, #200]	; (8002758 <HAL_GPIO_Init+0x350>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_GPIO_Init+0x350>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_GPIO_Init+0x350>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <HAL_GPIO_Init+0x350>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <HAL_GPIO_Init+0x350>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_GPIO_Init+0x350>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800270c:	4a12      	ldr	r2, [pc, #72]	; (8002758 <HAL_GPIO_Init+0x350>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa22 f303 	lsr.w	r3, r2, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f47f ae78 	bne.w	8002418 <HAL_GPIO_Init+0x10>
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	40010000 	.word	0x40010000
 8002740:	48000400 	.word	0x48000400
 8002744:	48000800 	.word	0x48000800
 8002748:	48000c00 	.word	0x48000c00
 800274c:	48001000 	.word	0x48001000
 8002750:	48001400 	.word	0x48001400
 8002754:	48001800 	.word	0x48001800
 8002758:	40010400 	.word	0x40010400

0800275c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800276c:	787b      	ldrb	r3, [r7, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002778:	e002      	b.n	8002780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40007000 	.word	0x40007000

080027a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b6:	d130      	bne.n	800281a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c4:	d038      	beq.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ce:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2232      	movs	r2, #50	; 0x32
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0c9b      	lsrs	r3, r3, #18
 80027e8:	3301      	adds	r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ec:	e002      	b.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002800:	d102      	bne.n	8002808 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f2      	bne.n	80027ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d110      	bne.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e00f      	b.n	800283a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	d007      	beq.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002830:	4a05      	ldr	r2, [pc, #20]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002836:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000
 800284c:	20000000 	.word	0x20000000
 8002850:	431bde83 	.word	0x431bde83

08002854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e3ca      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4b97      	ldr	r3, [pc, #604]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002870:	4b94      	ldr	r3, [pc, #592]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80e4 	beq.w	8002a50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_RCC_OscConfig+0x4a>
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	f040 808b 	bne.w	80029ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 8087 	bne.w	80029ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289e:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x62>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e3a2      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	4b82      	ldr	r3, [pc, #520]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_RCC_OscConfig+0x7c>
 80028c6:	4b7f      	ldr	r3, [pc, #508]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ce:	e005      	b.n	80028dc <HAL_RCC_OscConfig+0x88>
 80028d0:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	4293      	cmp	r3, r2
 80028de:	d223      	bcs.n	8002928 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fd87 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e383      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f4:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a72      	ldr	r2, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b70      	ldr	r3, [pc, #448]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	496d      	ldr	r1, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002912:	4b6c      	ldr	r3, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	4968      	ldr	r1, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
 8002926:	e025      	b.n	8002974 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002928:	4b66      	ldr	r3, [pc, #408]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a65      	ldr	r2, [pc, #404]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4960      	ldr	r1, [pc, #384]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002946:	4b5f      	ldr	r3, [pc, #380]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	495b      	ldr	r1, [pc, #364]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fd47 	bl	80033f8 <RCC_SetFlashLatencyFromMSIRange>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e343      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002974:	f000 fc4a 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	4950      	ldr	r1, [pc, #320]	; (8002ac8 <HAL_RCC_OscConfig+0x274>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <HAL_RCC_OscConfig+0x278>)
 8002992:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002994:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <HAL_RCC_OscConfig+0x27c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fb0d 	bl	8000fb8 <HAL_InitTick>
 800299e:	4603      	mov	r3, r0
 80029a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d052      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	e327      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d032      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a42      	ldr	r2, [pc, #264]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fc0c 	bl	80011dc <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c8:	f7fe fc08 	bl	80011dc <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e310      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a36      	ldr	r2, [pc, #216]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029ec:	f043 0308 	orr.w	r3, r3, #8
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4931      	ldr	r1, [pc, #196]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	492c      	ldr	r1, [pc, #176]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
 8002a18:	e01a      	b.n	8002a50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a29      	ldr	r2, [pc, #164]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fbd9 	bl	80011dc <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fbd5 	bl	80011dc <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e2dd      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x1da>
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d074      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x21a>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d10e      	bne.n	8002a86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d10b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d064      	beq.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d160      	bne.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e2ba      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x24a>
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e026      	b.n	8002aec <HAL_RCC_OscConfig+0x298>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa6:	d115      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x280>
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a02      	ldr	r2, [pc, #8]	; (8002ac4 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e014      	b.n	8002aec <HAL_RCC_OscConfig+0x298>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08007d5c 	.word	0x08007d5c
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a9f      	ldr	r2, [pc, #636]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b9d      	ldr	r3, [pc, #628]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a9c      	ldr	r2, [pc, #624]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe fb72 	bl	80011dc <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fe fb6e 	bl	80011dc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e276      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0e:	4b92      	ldr	r3, [pc, #584]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x2a8>
 8002b1a:	e014      	b.n	8002b46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fb5e 	bl	80011dc <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fe fb5a 	bl	80011dc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e262      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x2d0>
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d060      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x310>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d119      	bne.n	8002b92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d116      	bne.n	8002b92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b64:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_OscConfig+0x328>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e23f      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	4973      	ldr	r1, [pc, #460]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b90:	e040      	b.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d023      	beq.n	8002be2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9a:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fb19 	bl	80011dc <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fb15 	bl	80011dc <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e21d      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc0:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	495f      	ldr	r1, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
 8002be0:	e018      	b.n	8002c14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a5c      	ldr	r2, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe faf5 	bl	80011dc <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7fe faf1 	bl	80011dc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1f9      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d03c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c28:	4b4b      	ldr	r3, [pc, #300]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	4a4a      	ldr	r2, [pc, #296]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe fad0 	bl	80011dc <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c40:	f7fe facc 	bl	80011dc <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1d4      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <HAL_RCC_OscConfig+0x3ec>
 8002c60:	e01b      	b.n	8002c9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c62:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c68:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fab3 	bl	80011dc <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7fe faaf 	bl	80011dc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1b7      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c8c:	4b32      	ldr	r3, [pc, #200]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ef      	bne.n	8002c7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80a6 	beq.w	8002df4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cac:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d118      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cec:	f7fe fa76 	bl	80011dc <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe fa72 	bl	80011dc <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e17a      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_RCC_OscConfig+0x508>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d108      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4d8>
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2a:	e029      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d115      	bne.n	8002d60 <HAL_RCC_OscConfig+0x50c>
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	4a03      	ldr	r2, [pc, #12]	; (8002d58 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x52c>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	4b9c      	ldr	r3, [pc, #624]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	4a9b      	ldr	r2, [pc, #620]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d70:	4b98      	ldr	r3, [pc, #608]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	4a97      	ldr	r2, [pc, #604]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d016      	beq.n	8002db6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fa28 	bl	80011dc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d90:	f7fe fa24 	bl	80011dc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e12a      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ed      	beq.n	8002d90 <HAL_RCC_OscConfig+0x53c>
 8002db4:	e015      	b.n	8002de2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe fa11 	bl	80011dc <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe fa0d 	bl	80011dc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e113      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd4:	4b7f      	ldr	r3, [pc, #508]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ed      	bne.n	8002dbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de2:	7ffb      	ldrb	r3, [r7, #31]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	4a79      	ldr	r2, [pc, #484]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80fe 	beq.w	8002ffa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	f040 80d0 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e08:	4b72      	ldr	r3, [pc, #456]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0203 	and.w	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d130      	bne.n	8002e7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	3b01      	subs	r3, #1
 8002e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d127      	bne.n	8002e7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d11f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e48:	2a07      	cmp	r2, #7
 8002e4a:	bf14      	ite	ne
 8002e4c:	2201      	movne	r2, #1
 8002e4e:	2200      	moveq	r2, #0
 8002e50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d113      	bne.n	8002e7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	085b      	lsrs	r3, r3, #1
 8002e76:	3b01      	subs	r3, #1
 8002e78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d06e      	beq.n	8002f5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d069      	beq.n	8002f58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e84:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0ad      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4b      	ldr	r2, [pc, #300]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eac:	f7fe f996 	bl	80011dc <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f992 	bl	80011dc <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e09a      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed2:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <HAL_RCC_OscConfig+0x784>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ee2:	3a01      	subs	r2, #1
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	4311      	orrs	r1, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eec:	0212      	lsls	r2, r2, #8
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ef4:	0852      	lsrs	r2, r2, #1
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	0552      	lsls	r2, r2, #21
 8002efa:	4311      	orrs	r1, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f00:	0852      	lsrs	r2, r2, #1
 8002f02:	3a01      	subs	r2, #1
 8002f04:	0652      	lsls	r2, r2, #25
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f0c:	0912      	lsrs	r2, r2, #4
 8002f0e:	0452      	lsls	r2, r2, #17
 8002f10:	430a      	orrs	r2, r1
 8002f12:	4930      	ldr	r1, [pc, #192]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f18:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a2a      	ldr	r2, [pc, #168]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f30:	f7fe f954 	bl	80011dc <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe f950 	bl	80011dc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e058      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f56:	e050      	b.n	8002ffa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e04f      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d148      	bne.n	8002ffa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f80:	f7fe f92c 	bl	80011dc <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f928 	bl	80011dc <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e030      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x734>
 8002fa6:	e028      	b.n	8002ffa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d023      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fba:	f7fe f90f 	bl	80011dc <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc0:	e00c      	b.n	8002fdc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fe f90b 	bl	80011dc <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d905      	bls.n	8002fdc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e013      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_OscConfig+0x7b0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ec      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_OscConfig+0x7b0>)
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	4905      	ldr	r1, [pc, #20]	; (8003004 <HAL_RCC_OscConfig+0x7b0>)
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_OscConfig+0x7b4>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60cb      	str	r3, [r1, #12]
 8002ff4:	e001      	b.n	8002ffa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	feeefffc 	.word	0xfeeefffc

0800300c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0e7      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003020:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d910      	bls.n	8003050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 0207 	bic.w	r2, r3, #7
 8003036:	4970      	ldr	r1, [pc, #448]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0cf      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b66      	ldr	r3, [pc, #408]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4960      	ldr	r1, [pc, #384]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d04c      	beq.n	8003124 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003092:	4b5a      	ldr	r3, [pc, #360]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d121      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e0a6      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	4b54      	ldr	r3, [pc, #336]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d115      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e09a      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030c2:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e08e      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e086      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	4b46      	ldr	r3, [pc, #280]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4943      	ldr	r1, [pc, #268]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f4:	f7fe f872 	bl	80011dc <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f7fe f86e 	bl	80011dc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e06e      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 020c 	and.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	429a      	cmp	r2, r3
 8003122:	d1eb      	bne.n	80030fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d010      	beq.n	8003152 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	4b31      	ldr	r3, [pc, #196]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	429a      	cmp	r2, r3
 800313e:	d208      	bcs.n	8003152 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	492b      	ldr	r1, [pc, #172]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d210      	bcs.n	8003182 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 0207 	bic.w	r2, r3, #7
 8003168:	4923      	ldr	r1, [pc, #140]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d001      	beq.n	8003182 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e036      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4918      	ldr	r1, [pc, #96]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4910      	ldr	r1, [pc, #64]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031c0:	f000 f824 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_RCC_ClockConfig+0x1f0>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	490b      	ldr	r1, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x1f4>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1f8>)
 80031de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1fc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd fee7 	bl	8000fb8 <HAL_InitTick>
 80031ea:	4603      	mov	r3, r0
 80031ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80031ee:	7afb      	ldrb	r3, [r7, #11]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40021000 	.word	0x40021000
 8003200:	08007d5c 	.word	0x08007d5c
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321a:	4b3e      	ldr	r3, [pc, #248]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003224:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x34>
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d121      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d11e      	bne.n	800327e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800324c:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 800324e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e005      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003268:	4a2b      	ldr	r2, [pc, #172]	; (8003318 <HAL_RCC_GetSysClockFreq+0x10c>)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003270:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10d      	bne.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d102      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_GetSysClockFreq+0x110>)
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e004      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d101      	bne.n	8003294 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <HAL_RCC_GetSysClockFreq+0x114>)
 8003292:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d134      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d003      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0xac>
 80032b0:	e005      	b.n	80032be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RCC_GetSysClockFreq+0x110>)
 80032b4:	617b      	str	r3, [r7, #20]
      break;
 80032b6:	e005      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ba:	617b      	str	r3, [r7, #20]
      break;
 80032bc:	e002      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	617b      	str	r3, [r7, #20]
      break;
 80032c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	3301      	adds	r3, #1
 80032d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	fb03 f202 	mul.w	r2, r3, r2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	0e5b      	lsrs	r3, r3, #25
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	3301      	adds	r3, #1
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003304:	69bb      	ldr	r3, [r7, #24]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	08007d74 	.word	0x08007d74
 800331c:	00f42400 	.word	0x00f42400
 8003320:	007a1200 	.word	0x007a1200

08003324 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <HAL_RCC_GetHCLKFreq+0x14>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000000 	.word	0x20000000

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003340:	f7ff fff0 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	08007d6c 	.word	0x08007d6c

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800336c:	f7ff ffda 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0adb      	lsrs	r3, r3, #11
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4904      	ldr	r1, [pc, #16]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021000 	.word	0x40021000
 8003390:	08007d6c 	.word	0x08007d6c

08003394 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	220f      	movs	r2, #15
 80033a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCC_GetClockConfig+0x5c>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <HAL_RCC_GetClockConfig+0x5c>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCC_GetClockConfig+0x5c>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_RCC_GetClockConfig+0x5c>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_RCC_GetClockConfig+0x60>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0207 	and.w	r2, r3, #7
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40022000 	.word	0x40022000

080033f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003400:	2300      	movs	r3, #0
 8003402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003410:	f7ff f9bc 	bl	800278c <HAL_PWREx_GetVoltageRange>
 8003414:	6178      	str	r0, [r7, #20]
 8003416:	e014      	b.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	; 0x58
 8003424:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003430:	f7ff f9ac 	bl	800278c <HAL_PWREx_GetVoltageRange>
 8003434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003448:	d10b      	bne.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b80      	cmp	r3, #128	; 0x80
 800344e:	d919      	bls.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2ba0      	cmp	r3, #160	; 0xa0
 8003454:	d902      	bls.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003456:	2302      	movs	r3, #2
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e013      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e010      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d902      	bls.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003468:	2303      	movs	r3, #3
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00a      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d102      	bne.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003474:	2302      	movs	r3, #2
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e004      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d101      	bne.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 0207 	bic.w	r2, r3, #7
 800348c:	4909      	ldr	r1, [pc, #36]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40022000 	.word	0x40022000

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c0:	2300      	movs	r3, #0
 80034c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d041      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034dc:	d02a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e2:	d824      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e8:	d008      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ee:	d81e      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f8:	d010      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034fa:	e018      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034fc:	4b86      	ldr	r3, [pc, #536]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a85      	ldr	r2, [pc, #532]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fabb 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800351a:	e00c      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3320      	adds	r3, #32
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fba6 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	74fb      	strb	r3, [r7, #19]
      break;
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353c:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354a:	4973      	ldr	r1, [pc, #460]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003552:	e001      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d041      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800356c:	d02a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800356e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003572:	d824      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003578:	d008      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800357a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800357e:	d81e      	bhi.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003588:	d010      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800358a:	e018      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800358c:	4b62      	ldr	r3, [pc, #392]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a61      	ldr	r2, [pc, #388]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003598:	e015      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fa73 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035aa:	e00c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3320      	adds	r3, #32
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fb5e 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	74fb      	strb	r3, [r7, #19]
      break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035cc:	4b52      	ldr	r3, [pc, #328]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035da:	494f      	ldr	r1, [pc, #316]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035e2:	e001      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a0 	beq.w	8003736 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003610:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	4a40      	ldr	r2, [pc, #256]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	; 0x58
 800361c:	4b3e      	ldr	r3, [pc, #248]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003628:	2301      	movs	r3, #1
 800362a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800362c:	4b3b      	ldr	r3, [pc, #236]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3a      	ldr	r2, [pc, #232]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003638:	f7fd fdd0 	bl	80011dc <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800363e:	e009      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fd fdcc 	bl	80011dc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	74fb      	strb	r3, [r7, #19]
        break;
 8003652:	e005      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003654:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d15c      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003666:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01f      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	d019      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	4a20      	ldr	r2, [pc, #128]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fd fd8b 	bl	80011dc <HAL_GetTick>
 80036c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c8:	e00b      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fd fd87 	bl	80011dc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d902      	bls.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	74fb      	strb	r3, [r7, #19]
            break;
 80036e0:	e006      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ec      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003706:	4904      	ldr	r1, [pc, #16]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800370e:	e009      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003724:	7c7b      	ldrb	r3, [r7, #17]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b9e      	ldr	r3, [pc, #632]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	4a9d      	ldr	r2, [pc, #628]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003734:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003742:	4b98      	ldr	r3, [pc, #608]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f023 0203 	bic.w	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	4994      	ldr	r1, [pc, #592]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003764:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 020c 	bic.w	r2, r3, #12
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	498c      	ldr	r1, [pc, #560]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003786:	4b87      	ldr	r3, [pc, #540]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	4983      	ldr	r1, [pc, #524]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037a8:	4b7e      	ldr	r3, [pc, #504]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	497b      	ldr	r1, [pc, #492]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	4972      	ldr	r1, [pc, #456]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ec:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	496a      	ldr	r1, [pc, #424]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800380e:	4b65      	ldr	r3, [pc, #404]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	4961      	ldr	r1, [pc, #388]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003830:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	4959      	ldr	r1, [pc, #356]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003852:	4b54      	ldr	r3, [pc, #336]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	4950      	ldr	r1, [pc, #320]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003874:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	4948      	ldr	r1, [pc, #288]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003896:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	493f      	ldr	r1, [pc, #252]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d028      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b8:	4b3a      	ldr	r3, [pc, #232]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	4937      	ldr	r1, [pc, #220]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d6:	d106      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a31      	ldr	r2, [pc, #196]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]
 80038e4:	e011      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ee:	d10c      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f8c8 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003906:	7cfb      	ldrb	r3, [r7, #19]
 8003908:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d028      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	491f      	ldr	r1, [pc, #124]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003934:	d106      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003936:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003940:	60d3      	str	r3, [r2, #12]
 8003942:	e011      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800394c:	d10c      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f899 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02b      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	4908      	ldr	r1, [pc, #32]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003992:	d109      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a02      	ldr	r2, [pc, #8]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
 80039a0:	e014      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b0:	d10c      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f867 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02f      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e6:	4928      	ldr	r1, [pc, #160]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2102      	movs	r1, #2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f844 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d014      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	74bb      	strb	r3, [r7, #18]
 8003a12:	e011      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3320      	adds	r3, #32
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f925 	bl	8003c74 <RCCEx_PLLSAI2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a52:	490d      	ldr	r1, [pc, #52]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a76:	4904      	ldr	r1, [pc, #16]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000

08003a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a9a:	4b75      	ldr	r3, [pc, #468]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aa6:	4b72      	ldr	r3, [pc, #456]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0203 	and.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d047      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e044      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d018      	beq.n	8003b12 <RCCEx_PLLSAI1_Config+0x86>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d825      	bhi.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d002      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0x62>
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d009      	beq.n	8003b00 <RCCEx_PLLSAI1_Config+0x74>
 8003aec:	e020      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aee:	4b60      	ldr	r3, [pc, #384]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afe:	e01a      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b00:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e013      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b12:	4b57      	ldr	r3, [pc, #348]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b1e:	4b54      	ldr	r3, [pc, #336]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b2e:	e006      	b.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e004      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b46:	4b4a      	ldr	r3, [pc, #296]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	4944      	ldr	r1, [pc, #272]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d17d      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b68:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a40      	ldr	r2, [pc, #256]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b74:	f7fd fb32 	bl	80011dc <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b7c:	f7fd fb2e 	bl	80011dc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b8e:	e005      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ef      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d160      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	0211      	lsls	r1, r2, #8
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	0912      	lsrs	r2, r2, #4
 8003bc0:	0452      	lsls	r2, r2, #17
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	492a      	ldr	r1, [pc, #168]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	610b      	str	r3, [r1, #16]
 8003bca:	e027      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d112      	bne.n	8003bf8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6892      	ldr	r2, [r2, #8]
 8003be2:	0211      	lsls	r1, r2, #8
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6912      	ldr	r2, [r2, #16]
 8003be8:	0852      	lsrs	r2, r2, #1
 8003bea:	3a01      	subs	r2, #1
 8003bec:	0552      	lsls	r2, r2, #21
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	491f      	ldr	r1, [pc, #124]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	610b      	str	r3, [r1, #16]
 8003bf6:	e011      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6892      	ldr	r2, [r2, #8]
 8003c08:	0211      	lsls	r1, r2, #8
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6952      	ldr	r2, [r2, #20]
 8003c0e:	0852      	lsrs	r2, r2, #1
 8003c10:	3a01      	subs	r2, #1
 8003c12:	0652      	lsls	r2, r2, #25
 8003c14:	430a      	orrs	r2, r1
 8003c16:	4916      	ldr	r1, [pc, #88]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fd fad8 	bl	80011dc <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c2e:	e009      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c30:	f7fd fad4 	bl	80011dc <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d902      	bls.n	8003c44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	73fb      	strb	r3, [r7, #15]
          break;
 8003c42:	e005      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ef      	beq.n	8003c30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	4904      	ldr	r1, [pc, #16]	; (8003c70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000

08003c74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c82:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c8e:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0203 	and.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d10d      	bne.n	8003cba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ca6:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d047      	beq.n	8003d4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	e044      	b.n	8003d4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d018      	beq.n	8003cfa <RCCEx_PLLSAI2_Config+0x86>
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d825      	bhi.n	8003d18 <RCCEx_PLLSAI2_Config+0xa4>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d002      	beq.n	8003cd6 <RCCEx_PLLSAI2_Config+0x62>
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d009      	beq.n	8003ce8 <RCCEx_PLLSAI2_Config+0x74>
 8003cd4:	e020      	b.n	8003d18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd6:	4b55      	ldr	r3, [pc, #340]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11d      	bne.n	8003d1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce6:	e01a      	b.n	8003d1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e013      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d06:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d16:	e006      	b.n	8003d26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e004      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10d      	bne.n	8003d4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	430b      	orrs	r3, r1
 8003d44:	4939      	ldr	r1, [pc, #228]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d167      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d50:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a35      	ldr	r2, [pc, #212]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fa3e 	bl	80011dc <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d62:	e009      	b.n	8003d78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d64:	f7fd fa3a 	bl	80011dc <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	73fb      	strb	r3, [r7, #15]
        break;
 8003d76:	e005      	b.n	8003d84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d78:	4b2c      	ldr	r3, [pc, #176]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ef      	bne.n	8003d64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d14a      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d111      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	0211      	lsls	r1, r2, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	0912      	lsrs	r2, r2, #4
 8003da8:	0452      	lsls	r2, r2, #17
 8003daa:	430a      	orrs	r2, r1
 8003dac:	491f      	ldr	r1, [pc, #124]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	614b      	str	r3, [r1, #20]
 8003db2:	e011      	b.n	8003dd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6892      	ldr	r2, [r2, #8]
 8003dc4:	0211      	lsls	r1, r2, #8
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6912      	ldr	r2, [r2, #16]
 8003dca:	0852      	lsrs	r2, r2, #1
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	0652      	lsls	r2, r2, #25
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	4916      	ldr	r1, [pc, #88]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fd f9fa 	bl	80011dc <HAL_GetTick>
 8003de8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dea:	e009      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dec:	f7fd f9f6 	bl	80011dc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d902      	bls.n	8003e00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dfe:	e005      	b.n	8003e0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ef      	beq.n	8003dec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4904      	ldr	r1, [pc, #16]	; (8003e2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e049      	b.n	8003ed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc ff78 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f000 fd34 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d001      	beq.n	8003ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e04f      	b.n	8003f98 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01d      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0x76>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d018      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0x76>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0x76>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_TIM_Base_Start_IT+0xcc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0x76>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0x76>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_TIM_Base_Start_IT+0x76>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d115      	bne.n	8003f82 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b06      	cmp	r3, #6
 8003f66:	d015      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0xb4>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6e:	d011      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	e008      	b.n	8003f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e000      	b.n	8003f96 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40013400 	.word	0x40013400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	00010007 	.word	0x00010007

08003fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e049      	b.n	8004066 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f841 	bl	800406e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 fc6c 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d109      	bne.n	80040a8 <HAL_TIM_PWM_Start+0x24>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e03c      	b.n	8004122 <HAL_TIM_PWM_Start+0x9e>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d109      	bne.n	80040c2 <HAL_TIM_PWM_Start+0x3e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	bf14      	ite	ne
 80040ba:	2301      	movne	r3, #1
 80040bc:	2300      	moveq	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	e02f      	b.n	8004122 <HAL_TIM_PWM_Start+0x9e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d109      	bne.n	80040dc <HAL_TIM_PWM_Start+0x58>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e022      	b.n	8004122 <HAL_TIM_PWM_Start+0x9e>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d109      	bne.n	80040f6 <HAL_TIM_PWM_Start+0x72>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	e015      	b.n	8004122 <HAL_TIM_PWM_Start+0x9e>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d109      	bne.n	8004110 <HAL_TIM_PWM_Start+0x8c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e008      	b.n	8004122 <HAL_TIM_PWM_Start+0x9e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	bf14      	ite	ne
 800411c:	2301      	movne	r3, #1
 800411e:	2300      	moveq	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e09c      	b.n	8004264 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Start+0xb6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004138:	e023      	b.n	8004182 <HAL_TIM_PWM_Start+0xfe>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0xc6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004148:	e01b      	b.n	8004182 <HAL_TIM_PWM_Start+0xfe>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0xd6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004158:	e013      	b.n	8004182 <HAL_TIM_PWM_Start+0xfe>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b0c      	cmp	r3, #12
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0xe6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004168:	e00b      	b.n	8004182 <HAL_TIM_PWM_Start+0xfe>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b10      	cmp	r3, #16
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Start+0xf6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004178:	e003      	b.n	8004182 <HAL_TIM_PWM_Start+0xfe>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 ffb0 	bl	80050f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a35      	ldr	r2, [pc, #212]	; (800426c <HAL_TIM_PWM_Start+0x1e8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x13e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a34      	ldr	r2, [pc, #208]	; (8004270 <HAL_TIM_PWM_Start+0x1ec>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x13e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a32      	ldr	r2, [pc, #200]	; (8004274 <HAL_TIM_PWM_Start+0x1f0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x13e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a31      	ldr	r2, [pc, #196]	; (8004278 <HAL_TIM_PWM_Start+0x1f4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x13e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2f      	ldr	r2, [pc, #188]	; (800427c <HAL_TIM_PWM_Start+0x1f8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x142>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_TIM_PWM_Start+0x144>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <HAL_TIM_PWM_Start+0x1e8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01d      	beq.n	8004222 <HAL_TIM_PWM_Start+0x19e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d018      	beq.n	8004222 <HAL_TIM_PWM_Start+0x19e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a22      	ldr	r2, [pc, #136]	; (8004280 <HAL_TIM_PWM_Start+0x1fc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_TIM_PWM_Start+0x19e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <HAL_TIM_PWM_Start+0x200>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_TIM_PWM_Start+0x19e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_TIM_PWM_Start+0x204>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_TIM_PWM_Start+0x19e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a17      	ldr	r2, [pc, #92]	; (8004270 <HAL_TIM_PWM_Start+0x1ec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_TIM_PWM_Start+0x19e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a15      	ldr	r2, [pc, #84]	; (8004274 <HAL_TIM_PWM_Start+0x1f0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d115      	bne.n	800424e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <HAL_TIM_PWM_Start+0x208>)
 800422a:	4013      	ands	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b06      	cmp	r3, #6
 8004232:	d015      	beq.n	8004260 <HAL_TIM_PWM_Start+0x1dc>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423a:	d011      	beq.n	8004260 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424c:	e008      	b.n	8004260 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e000      	b.n	8004262 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40013400 	.word	0x40013400
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	00010007 	.word	0x00010007

08004290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0202 	mvn.w	r2, #2
 80042bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fae3 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fad5 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fae6 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0204 	mvn.w	r2, #4
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fab9 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 faab 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fabc 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b08      	cmp	r3, #8
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b08      	cmp	r3, #8
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0208 	mvn.w	r2, #8
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2204      	movs	r2, #4
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa8f 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fa81 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fa92 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0210 	mvn.w	r2, #16
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2208      	movs	r2, #8
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa65 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa57 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fa68 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10e      	bne.n	8004414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d107      	bne.n	8004414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0201 	mvn.w	r2, #1
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fbf4 	bl	8000bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b80      	cmp	r3, #128	; 0x80
 8004420:	d10e      	bne.n	8004440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d107      	bne.n	8004440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 ff10 	bl	8005260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d10e      	bne.n	800446e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d107      	bne.n	800446e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 ff03 	bl	8005274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d10e      	bne.n	800449a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d107      	bne.n	800449a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fa16 	bl	80048c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f06f 0220 	mvn.w	r2, #32
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fec3 	bl	800524c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e0ff      	b.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b14      	cmp	r3, #20
 80044fa:	f200 80f0 	bhi.w	80046de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004559 	.word	0x08004559
 8004508:	080046df 	.word	0x080046df
 800450c:	080046df 	.word	0x080046df
 8004510:	080046df 	.word	0x080046df
 8004514:	08004599 	.word	0x08004599
 8004518:	080046df 	.word	0x080046df
 800451c:	080046df 	.word	0x080046df
 8004520:	080046df 	.word	0x080046df
 8004524:	080045db 	.word	0x080045db
 8004528:	080046df 	.word	0x080046df
 800452c:	080046df 	.word	0x080046df
 8004530:	080046df 	.word	0x080046df
 8004534:	0800461b 	.word	0x0800461b
 8004538:	080046df 	.word	0x080046df
 800453c:	080046df 	.word	0x080046df
 8004540:	080046df 	.word	0x080046df
 8004544:	0800465d 	.word	0x0800465d
 8004548:	080046df 	.word	0x080046df
 800454c:	080046df 	.word	0x080046df
 8004550:	080046df 	.word	0x080046df
 8004554:	0800469d 	.word	0x0800469d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fa56 	bl	8004a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0208 	orr.w	r2, r2, #8
 8004572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0204 	bic.w	r2, r2, #4
 8004582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6999      	ldr	r1, [r3, #24]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	619a      	str	r2, [r3, #24]
      break;
 8004596:	e0a5      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fac6 	bl	8004b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	021a      	lsls	r2, r3, #8
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	619a      	str	r2, [r3, #24]
      break;
 80045d8:	e084      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb2f 	bl	8004c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0208 	orr.w	r2, r2, #8
 80045f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0204 	bic.w	r2, r2, #4
 8004604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69d9      	ldr	r1, [r3, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	61da      	str	r2, [r3, #28]
      break;
 8004618:	e064      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fb97 	bl	8004d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	021a      	lsls	r2, r3, #8
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	61da      	str	r2, [r3, #28]
      break;
 800465a:	e043      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fbe0 	bl	8004e28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0204 	bic.w	r2, r2, #4
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800469a:	e023      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fc24 	bl	8004ef0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046dc:	e002      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
      break;
 80046e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop

080046f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x1c>
 8004710:	2302      	movs	r3, #2
 8004712:	e0b6      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x18a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d03e      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0xd8>
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	f200 8087 	bhi.w	8004868 <HAL_TIM_ConfigClockSource+0x170>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	f000 8086 	beq.w	800486e <HAL_TIM_ConfigClockSource+0x176>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d87f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d01a      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0xaa>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d87b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d050      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x11e>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d877      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d03c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xfe>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d873      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d058      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x13e>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d86f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d064      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15e>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d86b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d060      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15e>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d867      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15e>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d05a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x15e>
 80047a0:	e062      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6899      	ldr	r1, [r3, #8]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f000 fc7d 	bl	80050b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	609a      	str	r2, [r3, #8]
      break;
 80047ce:	e04f      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6899      	ldr	r1, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f000 fc66 	bl	80050b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f2:	609a      	str	r2, [r3, #8]
      break;
 80047f4:	e03c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fbda 	bl	8004fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2150      	movs	r1, #80	; 0x50
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fc33 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 8004814:	e02c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 fbf9 	bl	800501a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2160      	movs	r1, #96	; 0x60
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fc23 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 8004834:	e01c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	461a      	mov	r2, r3
 8004844:	f000 fbba 	bl	8004fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fc13 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 8004854:	e00c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 fc0a 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 8004866:	e003      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e000      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800486e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3a      	ldr	r2, [pc, #232]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d01b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d017      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a28      	ldr	r2, [pc, #160]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00f      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a10      	ldr	r2, [pc, #64]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d103      	bne.n	80049dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40013400 	.word	0x40013400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f023 0302 	bic.w	r3, r3, #2
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <TIM_OC1_SetConfig+0x10c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00f      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <TIM_OC1_SetConfig+0x110>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <TIM_OC1_SetConfig+0x114>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <TIM_OC1_SetConfig+0x118>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a28      	ldr	r2, [pc, #160]	; (8004b2c <TIM_OC1_SetConfig+0x11c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10c      	bne.n	8004aaa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0308 	bic.w	r3, r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <TIM_OC1_SetConfig+0x10c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00f      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <TIM_OC1_SetConfig+0x110>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <TIM_OC1_SetConfig+0x114>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <TIM_OC1_SetConfig+0x118>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <TIM_OC1_SetConfig+0x11c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d111      	bne.n	8004af6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0210 	bic.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0320 	bic.w	r3, r3, #32
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <TIM_OC2_SetConfig+0x100>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_OC2_SetConfig+0x6c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <TIM_OC2_SetConfig+0x104>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10d      	bne.n	8004bb8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <TIM_OC2_SetConfig+0x100>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00f      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <TIM_OC2_SetConfig+0x104>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <TIM_OC2_SetConfig+0x108>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <TIM_OC2_SetConfig+0x10c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <TIM_OC2_SetConfig+0x110>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d113      	bne.n	8004c08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a27      	ldr	r2, [pc, #156]	; (8004d40 <TIM_OC3_SetConfig+0xfc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_OC3_SetConfig+0x6a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a26      	ldr	r2, [pc, #152]	; (8004d44 <TIM_OC3_SetConfig+0x100>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10d      	bne.n	8004cca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <TIM_OC3_SetConfig+0xfc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <TIM_OC3_SetConfig+0x100>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1a      	ldr	r2, [pc, #104]	; (8004d48 <TIM_OC3_SetConfig+0x104>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <TIM_OC3_SetConfig+0x108>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <TIM_OC3_SetConfig+0x10c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d113      	bne.n	8004d1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <TIM_OC4_SetConfig+0xc0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <TIM_OC4_SetConfig+0xc4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <TIM_OC4_SetConfig+0xc8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC4_SetConfig+0xcc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_OC4_SetConfig+0xd0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800

08004e28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <TIM_OC5_SetConfig+0xb4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_OC5_SetConfig+0xb8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC5_SetConfig+0xbc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <TIM_OC5_SetConfig+0xc0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <TIM_OC5_SetConfig+0xc4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d109      	bne.n	8004eb6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	051b      	lsls	r3, r3, #20
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <TIM_OC6_SetConfig+0xb8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00f      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	; (8004fac <TIM_OC6_SetConfig+0xbc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <TIM_OC6_SetConfig+0xc0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <TIM_OC6_SetConfig+0xc4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <TIM_OC6_SetConfig+0xc8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d109      	bne.n	8004f80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800

08004fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 030a 	bic.w	r3, r3, #10
 8004ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800501a:	b480      	push	{r7}
 800501c:	b087      	sub	sp, #28
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0210 	bic.w	r2, r3, #16
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	031b      	lsls	r3, r3, #12
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	f043 0307 	orr.w	r3, r3, #7
 800509c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	609a      	str	r2, [r3, #8]
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	021a      	lsls	r2, r3, #8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	609a      	str	r2, [r3, #8]
}
 80050e4:	bf00      	nop
 80050e6:	371c      	adds	r7, #28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2201      	movs	r2, #1
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	431a      	orrs	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e068      	b.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800518e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d018      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a18      	ldr	r2, [pc, #96]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a13      	ldr	r2, [pc, #76]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10c      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4313      	orrs	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40014000 	.word	0x40014000

0800524c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e040      	b.n	800531c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fdda 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fc94 	bl	8005bf4 <UART_SetConfig>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e022      	b.n	800531c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 ff40 	bl	8006164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 ffc7 	bl	80062a8 <UART_CheckIdleState>
 800531a:	4603      	mov	r3, r0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005338:	2b20      	cmp	r3, #32
 800533a:	f040 8082 	bne.w	8005442 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_UART_Transmit+0x26>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e07a      	b.n	8005444 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_UART_Transmit+0x38>
 8005358:	2302      	movs	r3, #2
 800535a:	e073      	b.n	8005444 <HAL_UART_Transmit+0x120>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2221      	movs	r2, #33	; 0x21
 8005370:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005372:	f7fb ff33 	bl	80011dc <HAL_GetTick>
 8005376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005390:	d108      	bne.n	80053a4 <HAL_UART_Transmit+0x80>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d104      	bne.n	80053a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e003      	b.n	80053ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80053b4:	e02d      	b.n	8005412 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2200      	movs	r2, #0
 80053be:	2180      	movs	r1, #128	; 0x80
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 ffba 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e039      	b.n	8005444 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e2:	b292      	uxth	r2, r2
 80053e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3302      	adds	r3, #2
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e008      	b.n	8005400 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	781a      	ldrb	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	b292      	uxth	r2, r2
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1cb      	bne.n	80053b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2200      	movs	r2, #0
 8005426:	2140      	movs	r1, #64	; 0x40
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 ff86 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e005      	b.n	8005444 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e000      	b.n	8005444 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	; 0x28
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005460:	2b20      	cmp	r3, #32
 8005462:	f040 80bf 	bne.w	80055e4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_UART_Receive+0x26>
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e0b7      	b.n	80055e6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_UART_Receive+0x38>
 8005480:	2302      	movs	r3, #2
 8005482:	e0b0      	b.n	80055e6 <HAL_UART_Receive+0x19a>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2222      	movs	r2, #34	; 0x22
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a0:	f7fb fe9c 	bl	80011dc <HAL_GetTick>
 80054a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054be:	d10e      	bne.n	80054de <HAL_UART_Receive+0x92>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <HAL_UART_Receive+0x88>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054d2:	e02d      	b.n	8005530 <HAL_UART_Receive+0xe4>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	22ff      	movs	r2, #255	; 0xff
 80054d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054dc:	e028      	b.n	8005530 <HAL_UART_Receive+0xe4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10d      	bne.n	8005502 <HAL_UART_Receive+0xb6>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <HAL_UART_Receive+0xac>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80054f6:	e01b      	b.n	8005530 <HAL_UART_Receive+0xe4>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	227f      	movs	r2, #127	; 0x7f
 80054fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005500:	e016      	b.n	8005530 <HAL_UART_Receive+0xe4>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800550a:	d10d      	bne.n	8005528 <HAL_UART_Receive+0xdc>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_UART_Receive+0xd2>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	227f      	movs	r2, #127	; 0x7f
 8005518:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800551c:	e008      	b.n	8005530 <HAL_UART_Receive+0xe4>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	223f      	movs	r2, #63	; 0x3f
 8005522:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005526:	e003      	b.n	8005530 <HAL_UART_Receive+0xe4>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005536:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005540:	d108      	bne.n	8005554 <HAL_UART_Receive+0x108>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	e003      	b.n	800555c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005564:	e033      	b.n	80055ce <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2200      	movs	r2, #0
 800556e:	2120      	movs	r1, #32
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fee2 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e032      	b.n	80055e6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10c      	bne.n	80055a0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800558c:	b29a      	uxth	r2, r3
 800558e:	8a7b      	ldrh	r3, [r7, #18]
 8005590:	4013      	ands	r3, r2
 8005592:	b29a      	uxth	r2, r3
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	3302      	adds	r3, #2
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e00d      	b.n	80055bc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	8a7b      	ldrh	r3, [r7, #18]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	4013      	ands	r3, r2
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3301      	adds	r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1c5      	bne.n	8005566 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e000      	b.n	80055e6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80055e4:	2302      	movs	r3, #2
  }
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b0ba      	sub	sp, #232	; 0xe8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800561a:	f640 030f 	movw	r3, #2063	; 0x80f
 800561e:	4013      	ands	r3, r2
 8005620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d115      	bne.n	8005658 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800562c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00f      	beq.n	8005658 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 82a6 	beq.w	8005b9a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
      }
      return;
 8005656:	e2a0      	b.n	8005b9a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8117 	beq.w	8005890 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800566e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005672:	4b85      	ldr	r3, [pc, #532]	; (8005888 <HAL_UART_IRQHandler+0x298>)
 8005674:	4013      	ands	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 810a 	beq.w	8005890 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <HAL_UART_IRQHandler+0xbc>
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d011      	beq.n	80056dc <HAL_UART_IRQHandler+0xec>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2202      	movs	r2, #2
 80056ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d2:	f043 0204 	orr.w	r2, r3, #4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d011      	beq.n	800570c <HAL_UART_IRQHandler+0x11c>
 80056e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2204      	movs	r2, #4
 80056fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005702:	f043 0202 	orr.w	r2, r3, #2
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d017      	beq.n	8005748 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005728:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2208      	movs	r2, #8
 8005736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005750:	2b00      	cmp	r3, #0
 8005752:	d012      	beq.n	800577a <HAL_UART_IRQHandler+0x18a>
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005758:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00c      	beq.n	800577a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005770:	f043 0220 	orr.w	r2, r3, #32
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 820c 	beq.w	8005b9e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d005      	beq.n	80057d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04f      	beq.n	8005872 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fe75 	bl	80064c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d141      	bne.n	800586a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800581e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800582a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1d9      	bne.n	80057e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	2b00      	cmp	r3, #0
 8005838:	d013      	beq.n	8005862 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a13      	ldr	r2, [pc, #76]	; (800588c <HAL_UART_IRQHandler+0x29c>)
 8005840:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4618      	mov	r0, r3
 8005848:	f7fc fd9c 	bl	8002384 <HAL_DMA_Abort_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d017      	beq.n	8005882 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e00f      	b.n	8005882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9b0 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00b      	b.n	8005882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9ac 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e007      	b.n	8005882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9a8 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005880:	e18d      	b.n	8005b9e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005882:	bf00      	nop
    return;
 8005884:	e18b      	b.n	8005b9e <HAL_UART_IRQHandler+0x5ae>
 8005886:	bf00      	nop
 8005888:	04000120 	.word	0x04000120
 800588c:	08006589 	.word	0x08006589

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 8146 	bne.w	8005b26 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 813f 	beq.w	8005b26 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8138 	beq.w	8005b26 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2210      	movs	r2, #16
 80058bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	f040 80b4 	bne.w	8005a36 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 815f 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ee:	429a      	cmp	r2, r3
 80058f0:	f080 8157 	bcs.w	8005ba2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	f040 8085 	bne.w	8005a1a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800592c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800593a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800593e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005946:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1da      	bne.n	8005910 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800596a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800597e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005982:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e1      	bne.n	800595a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ea:	f023 0310 	bic.w	r3, r3, #16
 80059ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e4      	bne.n	80059da <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fc fc77 	bl	8002308 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8d4 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a34:	e0b5      	b.n	8005ba2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80a7 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80a2 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
 8005a86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e4      	bne.n	8005a62 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f023 0301 	bic.w	r3, r3, #1
 8005aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005abc:	633a      	str	r2, [r7, #48]	; 0x30
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e3      	bne.n	8005a98 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0310 	bic.w	r3, r3, #16
 8005af6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	69b9      	ldr	r1, [r7, #24]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	617b      	str	r3, [r7, #20]
   return(result);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e4      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f85c 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b24:	e03f      	b.n	8005ba6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <HAL_UART_IRQHandler+0x560>
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fd5d 	bl	8006608 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b4e:	e02d      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01c      	beq.n	8005baa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
    }
    return;
 8005b78:	e017      	b.n	8005baa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d012      	beq.n	8005bac <HAL_UART_IRQHandler+0x5bc>
 8005b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fd0e 	bl	80065b4 <UART_EndTransmit_IT>
    return;
 8005b98:	e008      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b9a:	bf00      	nop
 8005b9c:	e006      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b9e:	bf00      	nop
 8005ba0:	e004      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
    return;
 8005baa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bac:	37e8      	adds	r7, #232	; 0xe8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop

08005bb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf8:	b08a      	sub	sp, #40	; 0x28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4ba4      	ldr	r3, [pc, #656]	; (8005eb4 <UART_SetConfig+0x2c0>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a99      	ldr	r2, [pc, #612]	; (8005eb8 <UART_SetConfig+0x2c4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a90      	ldr	r2, [pc, #576]	; (8005ebc <UART_SetConfig+0x2c8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d126      	bne.n	8005ccc <UART_SetConfig+0xd8>
 8005c7e:	4b90      	ldr	r3, [pc, #576]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d81b      	bhi.n	8005cc4 <UART_SetConfig+0xd0>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0xa0>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb5 	.word	0x08005cb5
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005caa:	e116      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cac:	2302      	movs	r3, #2
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb2:	e112      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cba:	e10e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc2:	e10a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cca:	e106      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a7c      	ldr	r2, [pc, #496]	; (8005ec4 <UART_SetConfig+0x2d0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d138      	bne.n	8005d48 <UART_SetConfig+0x154>
 8005cd6:	4b7a      	ldr	r3, [pc, #488]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d82d      	bhi.n	8005d40 <UART_SetConfig+0x14c>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <UART_SetConfig+0xf8>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d31 	.word	0x08005d31
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d39 	.word	0x08005d39
 8005d20:	2300      	movs	r3, #0
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d26:	e0d8      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e0d4      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e0d0      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e0cc      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d46:	e0c8      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5e      	ldr	r2, [pc, #376]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d125      	bne.n	8005d9e <UART_SetConfig+0x1aa>
 8005d52:	4b5b      	ldr	r3, [pc, #364]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d5c:	2b30      	cmp	r3, #48	; 0x30
 8005d5e:	d016      	beq.n	8005d8e <UART_SetConfig+0x19a>
 8005d60:	2b30      	cmp	r3, #48	; 0x30
 8005d62:	d818      	bhi.n	8005d96 <UART_SetConfig+0x1a2>
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d00a      	beq.n	8005d7e <UART_SetConfig+0x18a>
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d814      	bhi.n	8005d96 <UART_SetConfig+0x1a2>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <UART_SetConfig+0x182>
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d008      	beq.n	8005d86 <UART_SetConfig+0x192>
 8005d74:	e00f      	b.n	8005d96 <UART_SetConfig+0x1a2>
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7c:	e0ad      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d84:	e0a9      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d86:	2304      	movs	r3, #4
 8005d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8c:	e0a5      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d94:	e0a1      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d96:	2310      	movs	r3, #16
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9c:	e09d      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4a      	ldr	r2, [pc, #296]	; (8005ecc <UART_SetConfig+0x2d8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d125      	bne.n	8005df4 <UART_SetConfig+0x200>
 8005da8:	4b45      	ldr	r3, [pc, #276]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005db2:	2bc0      	cmp	r3, #192	; 0xc0
 8005db4:	d016      	beq.n	8005de4 <UART_SetConfig+0x1f0>
 8005db6:	2bc0      	cmp	r3, #192	; 0xc0
 8005db8:	d818      	bhi.n	8005dec <UART_SetConfig+0x1f8>
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d00a      	beq.n	8005dd4 <UART_SetConfig+0x1e0>
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d814      	bhi.n	8005dec <UART_SetConfig+0x1f8>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <UART_SetConfig+0x1d8>
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d008      	beq.n	8005ddc <UART_SetConfig+0x1e8>
 8005dca:	e00f      	b.n	8005dec <UART_SetConfig+0x1f8>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e082      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e07e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de2:	e07a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dea:	e076      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df2:	e072      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a35      	ldr	r2, [pc, #212]	; (8005ed0 <UART_SetConfig+0x2dc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d12a      	bne.n	8005e54 <UART_SetConfig+0x260>
 8005dfe:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0c:	d01a      	beq.n	8005e44 <UART_SetConfig+0x250>
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e12:	d81b      	bhi.n	8005e4c <UART_SetConfig+0x258>
 8005e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e18:	d00c      	beq.n	8005e34 <UART_SetConfig+0x240>
 8005e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1e:	d815      	bhi.n	8005e4c <UART_SetConfig+0x258>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <UART_SetConfig+0x238>
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e28:	d008      	beq.n	8005e3c <UART_SetConfig+0x248>
 8005e2a:	e00f      	b.n	8005e4c <UART_SetConfig+0x258>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e32:	e052      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e34:	2302      	movs	r3, #2
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3a:	e04e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e42:	e04a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e44:	2308      	movs	r3, #8
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4a:	e046      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e52:	e042      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <UART_SetConfig+0x2c4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d13a      	bne.n	8005ed4 <UART_SetConfig+0x2e0>
 8005e5e:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e6c:	d01a      	beq.n	8005ea4 <UART_SetConfig+0x2b0>
 8005e6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e72:	d81b      	bhi.n	8005eac <UART_SetConfig+0x2b8>
 8005e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e78:	d00c      	beq.n	8005e94 <UART_SetConfig+0x2a0>
 8005e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e7e:	d815      	bhi.n	8005eac <UART_SetConfig+0x2b8>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <UART_SetConfig+0x298>
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d008      	beq.n	8005e9c <UART_SetConfig+0x2a8>
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x2b8>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e022      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	e01e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea2:	e01a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eaa:	e016      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb2:	e012      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005eb4:	efff69f3 	.word	0xefff69f3
 8005eb8:	40008000 	.word	0x40008000
 8005ebc:	40013800 	.word	0x40013800
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40004400 	.word	0x40004400
 8005ec8:	40004800 	.word	0x40004800
 8005ecc:	40004c00 	.word	0x40004c00
 8005ed0:	40005000 	.word	0x40005000
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a9f      	ldr	r2, [pc, #636]	; (800615c <UART_SetConfig+0x568>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d17a      	bne.n	8005fda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d824      	bhi.n	8005f36 <UART_SetConfig+0x342>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x300>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f27 	.word	0x08005f27
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f37 	.word	0x08005f37
 8005f10:	08005f37 	.word	0x08005f37
 8005f14:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fd fa10 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e010      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b8f      	ldr	r3, [pc, #572]	; (8006160 <UART_SetConfig+0x56c>)
 8005f22:	61fb      	str	r3, [r7, #28]
        break;
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fd f971 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8005f2a:	61f8      	str	r0, [r7, #28]
        break;
 8005f2c:	e009      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	61fb      	str	r3, [r7, #28]
        break;
 8005f34:	e005      	b.n	8005f42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80fb 	beq.w	8006140 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4413      	add	r3, r2
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d305      	bcc.n	8005f66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d903      	bls.n	8005f6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f6c:	e0e8      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	2200      	movs	r2, #0
 8005f72:	461c      	mov	r4, r3
 8005f74:	4615      	mov	r5, r2
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	022b      	lsls	r3, r5, #8
 8005f80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f84:	0222      	lsls	r2, r4, #8
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	6849      	ldr	r1, [r1, #4]
 8005f8a:	0849      	lsrs	r1, r1, #1
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4688      	mov	r8, r1
 8005f90:	4681      	mov	r9, r0
 8005f92:	eb12 0a08 	adds.w	sl, r2, r8
 8005f96:	eb43 0b09 	adc.w	fp, r3, r9
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa8:	4650      	mov	r0, sl
 8005faa:	4659      	mov	r1, fp
 8005fac:	f7fa f910 	bl	80001d0 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbe:	d308      	bcc.n	8005fd2 <UART_SetConfig+0x3de>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc6:	d204      	bcs.n	8005fd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e0b6      	b.n	8006140 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fd8:	e0b2      	b.n	8006140 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe2:	d15e      	bne.n	80060a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d828      	bhi.n	800603e <UART_SetConfig+0x44a>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x400>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006029 	.word	0x08006029
 8006000:	0800603f 	.word	0x0800603f
 8006004:	0800602f 	.word	0x0800602f
 8006008:	0800603f 	.word	0x0800603f
 800600c:	0800603f 	.word	0x0800603f
 8006010:	0800603f 	.word	0x0800603f
 8006014:	08006037 	.word	0x08006037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006018:	f7fd f990 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 800601c:	61f8      	str	r0, [r7, #28]
        break;
 800601e:	e014      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006020:	f7fd f9a2 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8006024:	61f8      	str	r0, [r7, #28]
        break;
 8006026:	e010      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006028:	4b4d      	ldr	r3, [pc, #308]	; (8006160 <UART_SetConfig+0x56c>)
 800602a:	61fb      	str	r3, [r7, #28]
        break;
 800602c:	e00d      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800602e:	f7fd f8ed 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8006032:	61f8      	str	r0, [r7, #28]
        break;
 8006034:	e009      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603a:	61fb      	str	r3, [r7, #28]
        break;
 800603c:	e005      	b.n	800604a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d077      	beq.n	8006140 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005a      	lsls	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b0f      	cmp	r3, #15
 800606a:	d916      	bls.n	800609a <UART_SetConfig+0x4a6>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006072:	d212      	bcs.n	800609a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f023 030f 	bic.w	r3, r3, #15
 800607c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	b29a      	uxth	r2, r3
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	4313      	orrs	r3, r2
 800608e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	8afa      	ldrh	r2, [r7, #22]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	e052      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060a0:	e04e      	b.n	8006140 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d827      	bhi.n	80060fa <UART_SetConfig+0x506>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x4bc>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fd f932 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e014      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fd f944 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 80060e0:	61f8      	str	r0, [r7, #28]
        break;
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <UART_SetConfig+0x56c>)
 80060e6:	61fb      	str	r3, [r7, #28]
        break;
 80060e8:	e00d      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fd f88f 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80060ee:	61f8      	str	r0, [r7, #28]
        break;
 80060f0:	e009      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	61fb      	str	r3, [r7, #28]
        break;
 80060f8:	e005      	b.n	8006106 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006104:	bf00      	nop
    }

    if (pclk != 0U)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d019      	beq.n	8006140 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	085a      	lsrs	r2, r3, #1
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b0f      	cmp	r3, #15
 8006124:	d909      	bls.n	800613a <UART_SetConfig+0x546>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	d205      	bcs.n	800613a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e002      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800614c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615a:	bf00      	nop
 800615c:	40008000 	.word	0x40008000
 8006160:	00f42400 	.word	0x00f42400

08006164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006262:	d10a      	bne.n	800627a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062b8:	f7fa ff90 	bl	80011dc <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f82d 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e023      	b.n	8006332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d10e      	bne.n	8006316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f817 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00d      	b.n	8006332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b09c      	sub	sp, #112	; 0x70
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634a:	e0a5      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006352:	f000 80a1 	beq.w	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fa ff41 	bl	80011dc <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <UART_WaitOnFlagUntilTimeout+0x32>
 8006366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006368:	2b00      	cmp	r3, #0
 800636a:	d13e      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006380:	667b      	str	r3, [r7, #100]	; 0x64
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800638a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e6      	bne.n	800636c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	663b      	str	r3, [r7, #96]	; 0x60
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063be:	64ba      	str	r2, [r7, #72]	; 0x48
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e5      	bne.n	800639e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e067      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d04f      	beq.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006406:	d147      	bne.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006410:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	66bb      	str	r3, [r7, #104]	; 0x68
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006464:	623a      	str	r2, [r7, #32]
 8006466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	69f9      	ldr	r1, [r7, #28]
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	61bb      	str	r3, [r7, #24]
   return(result);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e010      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	f43f af4a 	beq.w	800634c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3770      	adds	r7, #112	; 0x70
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b095      	sub	sp, #84	; 0x54
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	643b      	str	r3, [r7, #64]	; 0x40
 80064ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e6      	bne.n	80064ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	61fb      	str	r3, [r7, #28]
   return(result);
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f023 0301 	bic.w	r3, r3, #1
 8006512:	64bb      	str	r3, [r7, #72]	; 0x48
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800651c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e5      	bne.n	80064fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006534:	2b01      	cmp	r3, #1
 8006536:	d118      	bne.n	800656a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	60bb      	str	r3, [r7, #8]
   return(result);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f023 0310 	bic.w	r3, r3, #16
 800654c:	647b      	str	r3, [r7, #68]	; 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6979      	ldr	r1, [r7, #20]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	613b      	str	r3, [r7, #16]
   return(result);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e6      	bne.n	8006538 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800657c:	bf00      	nop
 800657e:	3754      	adds	r7, #84	; 0x54
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff fb0e 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6979      	ldr	r1, [r7, #20]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	613b      	str	r3, [r7, #16]
   return(result);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e6      	bne.n	80065bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fada 	bl	8005bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006600:	bf00      	nop
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800662a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800662e:	2b84      	cmp	r3, #132	; 0x84
 8006630:	d005      	beq.n	800663e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006632:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	3303      	adds	r3, #3
 800663c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800663e:	68fb      	ldr	r3, [r7, #12]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006650:	f000 faf6 	bl	8006c40 <vTaskStartScheduler>
  
  return osOK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	bd80      	pop	{r7, pc}

0800665a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800665a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665c:	b089      	sub	sp, #36	; 0x24
 800665e:	af04      	add	r7, sp, #16
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d020      	beq.n	80066ae <osThreadCreate+0x54>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01c      	beq.n	80066ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685c      	ldr	r4, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681d      	ldr	r5, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691e      	ldr	r6, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ffc8 	bl	800661c <makeFreeRtosPriority>
 800668c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006696:	9202      	str	r2, [sp, #8]
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	9100      	str	r1, [sp, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	4632      	mov	r2, r6
 80066a0:	4629      	mov	r1, r5
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f8ed 	bl	8006882 <xTaskCreateStatic>
 80066a8:	4603      	mov	r3, r0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e01c      	b.n	80066e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685c      	ldr	r4, [r3, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ba:	b29e      	uxth	r6, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ffaa 	bl	800661c <makeFreeRtosPriority>
 80066c8:	4602      	mov	r2, r0
 80066ca:	f107 030c 	add.w	r3, r7, #12
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	9200      	str	r2, [sp, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	4632      	mov	r2, r6
 80066d6:	4629      	mov	r1, r5
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 f92f 	bl	800693c <xTaskCreate>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d001      	beq.n	80066e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e000      	b.n	80066ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80066e8:	68fb      	ldr	r3, [r7, #12]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <osDelay+0x16>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	e000      	b.n	800670a <osDelay+0x18>
 8006708:	2301      	movs	r3, #1
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fa64 	bl	8006bd8 <vTaskDelay>
  
  return osOK;
 8006710:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f103 0208 	add.w	r2, r3, #8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006732:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f103 0208 	add.w	r2, r3, #8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f103 0208 	add.w	r2, r3, #8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
}
 80067b0:	bf00      	nop
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d2:	d103      	bne.n	80067dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e00c      	b.n	80067f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3308      	adds	r3, #8
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e002      	b.n	80067ea <vListInsert+0x2e>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d2f6      	bcs.n	80067e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6892      	ldr	r2, [r2, #8]
 8006844:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6852      	ldr	r2, [r2, #4]
 800684e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d103      	bne.n	8006862 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	1e5a      	subs	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006882:	b580      	push	{r7, lr}
 8006884:	b08e      	sub	sp, #56	; 0x38
 8006886:	af04      	add	r7, sp, #16
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10a      	bne.n	80068ac <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10a      	bne.n	80068c8 <xTaskCreateStatic+0x46>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61fb      	str	r3, [r7, #28]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068c8:	23b4      	movs	r3, #180	; 0xb4
 80068ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2bb4      	cmp	r3, #180	; 0xb4
 80068d0:	d00a      	beq.n	80068e8 <xTaskCreateStatic+0x66>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	61bb      	str	r3, [r7, #24]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01e      	beq.n	800692e <xTaskCreateStatic+0xac>
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01b      	beq.n	800692e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	2202      	movs	r2, #2
 8006904:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006908:	2300      	movs	r3, #0
 800690a:	9303      	str	r3, [sp, #12]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	f107 0314 	add.w	r3, r7, #20
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f851 	bl	80069c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006928:	f000 f8ec 	bl	8006b04 <prvAddNewTaskToReadyList>
 800692c:	e001      	b.n	8006932 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006932:	697b      	ldr	r3, [r7, #20]
	}
 8006934:	4618      	mov	r0, r3
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af04      	add	r7, sp, #16
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fef1 	bl	8007738 <pvPortMalloc>
 8006956:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00e      	beq.n	800697c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800695e:	20b4      	movs	r0, #180	; 0xb4
 8006960:	f000 feea 	bl	8007738 <pvPortMalloc>
 8006964:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
 8006972:	e005      	b.n	8006980 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	f000 ffab 	bl	80078d0 <vPortFree>
 800697a:	e001      	b.n	8006980 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d017      	beq.n	80069b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800698e:	88fa      	ldrh	r2, [r7, #6]
 8006990:	2300      	movs	r3, #0
 8006992:	9303      	str	r3, [sp, #12]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	9302      	str	r3, [sp, #8]
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f80f 	bl	80069c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069aa:	69f8      	ldr	r0, [r7, #28]
 80069ac:	f000 f8aa 	bl	8006b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069b0:	2301      	movs	r3, #1
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	e002      	b.n	80069bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069bc:	69bb      	ldr	r3, [r7, #24]
	}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069e0:	3b01      	subs	r3, #1
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f023 0307 	bic.w	r3, r3, #7
 80069ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <prvInitialiseNewTask+0x48>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	617b      	str	r3, [r7, #20]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d01f      	beq.n	8006a56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	e012      	b.n	8006a42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	7819      	ldrb	r1, [r3, #0]
 8006a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3334      	adds	r3, #52	; 0x34
 8006a2c:	460a      	mov	r2, r1
 8006a2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d006      	beq.n	8006a4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b0f      	cmp	r3, #15
 8006a46:	d9e9      	bls.n	8006a1c <prvInitialiseNewTask+0x54>
 8006a48:	e000      	b.n	8006a4c <prvInitialiseNewTask+0x84>
			{
				break;
 8006a4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a54:	e003      	b.n	8006a5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	2b06      	cmp	r3, #6
 8006a62:	d901      	bls.n	8006a68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a64:	2306      	movs	r3, #6
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2200      	movs	r2, #0
 8006a78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fe6b 	bl	800675a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	3318      	adds	r3, #24
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff fe66 	bl	800675a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f1c3 0207 	rsb	r2, r3, #7
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	334c      	adds	r3, #76	; 0x4c
 8006ab8:	2260      	movs	r2, #96	; 0x60
 8006aba:	2100      	movs	r1, #0
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f84b 	bl	8007b58 <memset>
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <prvInitialiseNewTask+0x130>)
 8006ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <prvInitialiseNewTask+0x134>)
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	; (8006b00 <prvInitialiseNewTask+0x138>)
 8006ad2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	69b8      	ldr	r0, [r7, #24]
 8006ada:	f000 fc1f 	bl	800731c <pxPortInitialiseStack>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006af0:	bf00      	nop
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08007dc4 	.word	0x08007dc4
 8006afc:	08007de4 	.word	0x08007de4
 8006b00:	08007da4 	.word	0x08007da4

08006b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b0c:	f000 fd32 	bl	8007574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b10:	4b2a      	ldr	r3, [pc, #168]	; (8006bbc <prvAddNewTaskToReadyList+0xb8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	4a29      	ldr	r2, [pc, #164]	; (8006bbc <prvAddNewTaskToReadyList+0xb8>)
 8006b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b1a:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b22:	4a27      	ldr	r2, [pc, #156]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b28:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <prvAddNewTaskToReadyList+0xb8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d110      	bne.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b30:	f000 facc 	bl	80070cc <prvInitialiseTaskLists>
 8006b34:	e00d      	b.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b36:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <prvAddNewTaskToReadyList+0xc0>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b3e:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d802      	bhi.n	8006b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b52:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <prvAddNewTaskToReadyList+0xc4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a1b      	ldr	r2, [pc, #108]	; (8006bc8 <prvAddNewTaskToReadyList+0xc4>)
 8006b5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2201      	movs	r2, #1
 8006b62:	409a      	lsls	r2, r3
 8006b64:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <prvAddNewTaskToReadyList+0xc8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <prvAddNewTaskToReadyList+0xc8>)
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <prvAddNewTaskToReadyList+0xcc>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7ff fdf5 	bl	8006774 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b8a:	f000 fd23 	bl	80075d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <prvAddNewTaskToReadyList+0xc0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00e      	beq.n	8006bb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <prvAddNewTaskToReadyList+0xbc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d207      	bcs.n	8006bb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <prvAddNewTaskToReadyList+0xd0>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	2000069c 	.word	0x2000069c
 8006bc0:	2000059c 	.word	0x2000059c
 8006bc4:	200006a8 	.word	0x200006a8
 8006bc8:	200006b8 	.word	0x200006b8
 8006bcc:	200006a4 	.word	0x200006a4
 8006bd0:	200005a0 	.word	0x200005a0
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d017      	beq.n	8006c1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bea:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <vTaskDelay+0x60>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <vTaskDelay+0x30>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	60bb      	str	r3, [r7, #8]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c08:	f000 f884 	bl	8006d14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fb1e 	bl	8007250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c14:	f000 f88c 	bl	8006d30 <xTaskResumeAll>
 8006c18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d107      	bne.n	8006c30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <vTaskDelay+0x64>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	200006c4 	.word	0x200006c4
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c4e:	463a      	mov	r2, r7
 8006c50:	1d39      	adds	r1, r7, #4
 8006c52:	f107 0308 	add.w	r3, r7, #8
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7f9 fc3c 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	9202      	str	r2, [sp, #8]
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	2300      	movs	r3, #0
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	460a      	mov	r2, r1
 8006c6e:	4921      	ldr	r1, [pc, #132]	; (8006cf4 <vTaskStartScheduler+0xb4>)
 8006c70:	4821      	ldr	r0, [pc, #132]	; (8006cf8 <vTaskStartScheduler+0xb8>)
 8006c72:	f7ff fe06 	bl	8006882 <xTaskCreateStatic>
 8006c76:	4603      	mov	r3, r0
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <vTaskStartScheduler+0xbc>)
 8006c7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c7c:	4b1f      	ldr	r3, [pc, #124]	; (8006cfc <vTaskStartScheduler+0xbc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c84:	2301      	movs	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e001      	b.n	8006c8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d11b      	bne.n	8006ccc <vTaskStartScheduler+0x8c>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	613b      	str	r3, [r7, #16]
}
 8006ca6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ca8:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <vTaskStartScheduler+0xc0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	334c      	adds	r3, #76	; 0x4c
 8006cae:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <vTaskStartScheduler+0xc4>)
 8006cb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <vTaskStartScheduler+0xc8>)
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cba:	4b14      	ldr	r3, [pc, #80]	; (8006d0c <vTaskStartScheduler+0xcc>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <vTaskStartScheduler+0xd0>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cc6:	f000 fbb3 	bl	8007430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cca:	e00e      	b.n	8006cea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd2:	d10a      	bne.n	8006cea <vTaskStartScheduler+0xaa>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	60fb      	str	r3, [r7, #12]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <vTaskStartScheduler+0xa8>
}
 8006cea:	bf00      	nop
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08007d54 	.word	0x08007d54
 8006cf8:	0800709d 	.word	0x0800709d
 8006cfc:	200006c0 	.word	0x200006c0
 8006d00:	2000059c 	.word	0x2000059c
 8006d04:	20000010 	.word	0x20000010
 8006d08:	200006bc 	.word	0x200006bc
 8006d0c:	200006a8 	.word	0x200006a8
 8006d10:	200006a0 	.word	0x200006a0

08006d14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d18:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <vTaskSuspendAll+0x18>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	4a03      	ldr	r2, [pc, #12]	; (8006d2c <vTaskSuspendAll+0x18>)
 8006d20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d22:	bf00      	nop
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	200006c4 	.word	0x200006c4

08006d30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d3e:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	603b      	str	r3, [r7, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d5c:	f000 fc0a 	bl	8007574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d60:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d6a:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <xTaskResumeAll+0x114>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d161      	bne.n	8006e36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d72:	4b35      	ldr	r3, [pc, #212]	; (8006e48 <xTaskResumeAll+0x118>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d05d      	beq.n	8006e36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d7a:	e02e      	b.n	8006dda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7c:	4b33      	ldr	r3, [pc, #204]	; (8006e4c <xTaskResumeAll+0x11c>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3318      	adds	r3, #24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fd50 	bl	800682e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3304      	adds	r3, #4
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fd4b 	bl	800682e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	4b2b      	ldr	r3, [pc, #172]	; (8006e50 <xTaskResumeAll+0x120>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <xTaskResumeAll+0x120>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4a27      	ldr	r2, [pc, #156]	; (8006e54 <xTaskResumeAll+0x124>)
 8006db8:	441a      	add	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7ff fcd7 	bl	8006774 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dca:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <xTaskResumeAll+0x128>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d302      	bcc.n	8006dda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006dd4:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <xTaskResumeAll+0x12c>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dda:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <xTaskResumeAll+0x11c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1cc      	bne.n	8006d7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006de8:	f000 fa12 	bl	8007210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006dec:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <xTaskResumeAll+0x130>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006df8:	f000 f836 	bl	8006e68 <xTaskIncrementTick>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e02:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <xTaskResumeAll+0x12c>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f1      	bne.n	8006df8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <xTaskResumeAll+0x130>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e1a:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <xTaskResumeAll+0x12c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e22:	2301      	movs	r3, #1
 8006e24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <xTaskResumeAll+0x134>)
 8006e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e36:	f000 fbcd 	bl	80075d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	200006c4 	.word	0x200006c4
 8006e48:	2000069c 	.word	0x2000069c
 8006e4c:	2000065c 	.word	0x2000065c
 8006e50:	200006a4 	.word	0x200006a4
 8006e54:	200005a0 	.word	0x200005a0
 8006e58:	2000059c 	.word	0x2000059c
 8006e5c:	200006b0 	.word	0x200006b0
 8006e60:	200006ac 	.word	0x200006ac
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e72:	4b4e      	ldr	r3, [pc, #312]	; (8006fac <xTaskIncrementTick+0x144>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 808e 	bne.w	8006f98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e7c:	4b4c      	ldr	r3, [pc, #304]	; (8006fb0 <xTaskIncrementTick+0x148>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e84:	4a4a      	ldr	r2, [pc, #296]	; (8006fb0 <xTaskIncrementTick+0x148>)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d120      	bne.n	8006ed2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e90:	4b48      	ldr	r3, [pc, #288]	; (8006fb4 <xTaskIncrementTick+0x14c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	603b      	str	r3, [r7, #0]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <xTaskIncrementTick+0x46>
 8006eb0:	4b40      	ldr	r3, [pc, #256]	; (8006fb4 <xTaskIncrementTick+0x14c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	4b40      	ldr	r3, [pc, #256]	; (8006fb8 <xTaskIncrementTick+0x150>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a3e      	ldr	r2, [pc, #248]	; (8006fb4 <xTaskIncrementTick+0x14c>)
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	4a3e      	ldr	r2, [pc, #248]	; (8006fb8 <xTaskIncrementTick+0x150>)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	4b3d      	ldr	r3, [pc, #244]	; (8006fbc <xTaskIncrementTick+0x154>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	4a3c      	ldr	r2, [pc, #240]	; (8006fbc <xTaskIncrementTick+0x154>)
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	f000 f99f 	bl	8007210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ed2:	4b3b      	ldr	r3, [pc, #236]	; (8006fc0 <xTaskIncrementTick+0x158>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d348      	bcc.n	8006f6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <xTaskIncrementTick+0x14c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <xTaskIncrementTick+0x158>)
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eec:	601a      	str	r2, [r3, #0]
					break;
 8006eee:	e03e      	b.n	8006f6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef0:	4b30      	ldr	r3, [pc, #192]	; (8006fb4 <xTaskIncrementTick+0x14c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d203      	bcs.n	8006f10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f08:	4a2d      	ldr	r2, [pc, #180]	; (8006fc0 <xTaskIncrementTick+0x158>)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f0e:	e02e      	b.n	8006f6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fc8a 	bl	800682e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	3318      	adds	r3, #24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fc81 	bl	800682e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	2201      	movs	r2, #1
 8006f32:	409a      	lsls	r2, r3
 8006f34:	4b23      	ldr	r3, [pc, #140]	; (8006fc4 <xTaskIncrementTick+0x15c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	4a22      	ldr	r2, [pc, #136]	; (8006fc4 <xTaskIncrementTick+0x15c>)
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4a1f      	ldr	r2, [pc, #124]	; (8006fc8 <xTaskIncrementTick+0x160>)
 8006f4c:	441a      	add	r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f7ff fc0d 	bl	8006774 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5e:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <xTaskIncrementTick+0x164>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d3b9      	bcc.n	8006edc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f6c:	e7b6      	b.n	8006edc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f6e:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <xTaskIncrementTick+0x164>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	4914      	ldr	r1, [pc, #80]	; (8006fc8 <xTaskIncrementTick+0x160>)
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d901      	bls.n	8006f8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f8a:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <xTaskIncrementTick+0x168>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f92:	2301      	movs	r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e004      	b.n	8006fa2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <xTaskIncrementTick+0x16c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a0d      	ldr	r2, [pc, #52]	; (8006fd4 <xTaskIncrementTick+0x16c>)
 8006fa0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006fa2:	697b      	ldr	r3, [r7, #20]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200006c4 	.word	0x200006c4
 8006fb0:	200006a0 	.word	0x200006a0
 8006fb4:	20000654 	.word	0x20000654
 8006fb8:	20000658 	.word	0x20000658
 8006fbc:	200006b4 	.word	0x200006b4
 8006fc0:	200006bc 	.word	0x200006bc
 8006fc4:	200006a4 	.word	0x200006a4
 8006fc8:	200005a0 	.word	0x200005a0
 8006fcc:	2000059c 	.word	0x2000059c
 8006fd0:	200006b0 	.word	0x200006b0
 8006fd4:	200006ac 	.word	0x200006ac

08006fd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fde:	4b29      	ldr	r3, [pc, #164]	; (8007084 <vTaskSwitchContext+0xac>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fe6:	4b28      	ldr	r3, [pc, #160]	; (8007088 <vTaskSwitchContext+0xb0>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fec:	e044      	b.n	8007078 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006fee:	4b26      	ldr	r3, [pc, #152]	; (8007088 <vTaskSwitchContext+0xb0>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff4:	4b25      	ldr	r3, [pc, #148]	; (800708c <vTaskSwitchContext+0xb4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	fab3 f383 	clz	r3, r3
 8007000:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	f1c3 031f 	rsb	r3, r3, #31
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	4921      	ldr	r1, [pc, #132]	; (8007090 <vTaskSwitchContext+0xb8>)
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <vTaskSwitchContext+0x5c>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	607b      	str	r3, [r7, #4]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <vTaskSwitchContext+0x5a>
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4a14      	ldr	r2, [pc, #80]	; (8007090 <vTaskSwitchContext+0xb8>)
 8007040:	4413      	add	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3308      	adds	r3, #8
 8007056:	429a      	cmp	r2, r3
 8007058:	d104      	bne.n	8007064 <vTaskSwitchContext+0x8c>
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	4a0a      	ldr	r2, [pc, #40]	; (8007094 <vTaskSwitchContext+0xbc>)
 800706c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800706e:	4b09      	ldr	r3, [pc, #36]	; (8007094 <vTaskSwitchContext+0xbc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	334c      	adds	r3, #76	; 0x4c
 8007074:	4a08      	ldr	r2, [pc, #32]	; (8007098 <vTaskSwitchContext+0xc0>)
 8007076:	6013      	str	r3, [r2, #0]
}
 8007078:	bf00      	nop
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	200006c4 	.word	0x200006c4
 8007088:	200006b0 	.word	0x200006b0
 800708c:	200006a4 	.word	0x200006a4
 8007090:	200005a0 	.word	0x200005a0
 8007094:	2000059c 	.word	0x2000059c
 8007098:	20000010 	.word	0x20000010

0800709c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070a4:	f000 f852 	bl	800714c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070a8:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <prvIdleTask+0x28>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d9f9      	bls.n	80070a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <prvIdleTask+0x2c>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070c0:	e7f0      	b.n	80070a4 <prvIdleTask+0x8>
 80070c2:	bf00      	nop
 80070c4:	200005a0 	.word	0x200005a0
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070d2:	2300      	movs	r3, #0
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	e00c      	b.n	80070f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4a12      	ldr	r2, [pc, #72]	; (800712c <prvInitialiseTaskLists+0x60>)
 80070e4:	4413      	add	r3, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fb17 	bl	800671a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3301      	adds	r3, #1
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b06      	cmp	r3, #6
 80070f6:	d9ef      	bls.n	80070d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070f8:	480d      	ldr	r0, [pc, #52]	; (8007130 <prvInitialiseTaskLists+0x64>)
 80070fa:	f7ff fb0e 	bl	800671a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070fe:	480d      	ldr	r0, [pc, #52]	; (8007134 <prvInitialiseTaskLists+0x68>)
 8007100:	f7ff fb0b 	bl	800671a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007104:	480c      	ldr	r0, [pc, #48]	; (8007138 <prvInitialiseTaskLists+0x6c>)
 8007106:	f7ff fb08 	bl	800671a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800710a:	480c      	ldr	r0, [pc, #48]	; (800713c <prvInitialiseTaskLists+0x70>)
 800710c:	f7ff fb05 	bl	800671a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007110:	480b      	ldr	r0, [pc, #44]	; (8007140 <prvInitialiseTaskLists+0x74>)
 8007112:	f7ff fb02 	bl	800671a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <prvInitialiseTaskLists+0x78>)
 8007118:	4a05      	ldr	r2, [pc, #20]	; (8007130 <prvInitialiseTaskLists+0x64>)
 800711a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <prvInitialiseTaskLists+0x7c>)
 800711e:	4a05      	ldr	r2, [pc, #20]	; (8007134 <prvInitialiseTaskLists+0x68>)
 8007120:	601a      	str	r2, [r3, #0]
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200005a0 	.word	0x200005a0
 8007130:	2000062c 	.word	0x2000062c
 8007134:	20000640 	.word	0x20000640
 8007138:	2000065c 	.word	0x2000065c
 800713c:	20000670 	.word	0x20000670
 8007140:	20000688 	.word	0x20000688
 8007144:	20000654 	.word	0x20000654
 8007148:	20000658 	.word	0x20000658

0800714c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007152:	e019      	b.n	8007188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007154:	f000 fa0e 	bl	8007574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007158:	4b10      	ldr	r3, [pc, #64]	; (800719c <prvCheckTasksWaitingTermination+0x50>)
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff fb62 	bl	800682e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800716a:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <prvCheckTasksWaitingTermination+0x54>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3b01      	subs	r3, #1
 8007170:	4a0b      	ldr	r2, [pc, #44]	; (80071a0 <prvCheckTasksWaitingTermination+0x54>)
 8007172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007174:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <prvCheckTasksWaitingTermination+0x58>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3b01      	subs	r3, #1
 800717a:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <prvCheckTasksWaitingTermination+0x58>)
 800717c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800717e:	f000 fa29 	bl	80075d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f810 	bl	80071a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <prvCheckTasksWaitingTermination+0x58>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e1      	bne.n	8007154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000670 	.word	0x20000670
 80071a0:	2000069c 	.word	0x2000069c
 80071a4:	20000684 	.word	0x20000684

080071a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	334c      	adds	r3, #76	; 0x4c
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fce5 	bl	8007b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d108      	bne.n	80071d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fb81 	bl	80078d0 <vPortFree>
				vPortFree( pxTCB );
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb7e 	bl	80078d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071d4:	e018      	b.n	8007208 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d103      	bne.n	80071e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb75 	bl	80078d0 <vPortFree>
	}
 80071e6:	e00f      	b.n	8007208 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d00a      	beq.n	8007208 <prvDeleteTCB+0x60>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60fb      	str	r3, [r7, #12]
}
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <prvDeleteTCB+0x5e>
	}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007216:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <prvResetNextTaskUnblockTime+0x38>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007220:	4b0a      	ldr	r3, [pc, #40]	; (800724c <prvResetNextTaskUnblockTime+0x3c>)
 8007222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007228:	e008      	b.n	800723c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722a:	4b07      	ldr	r3, [pc, #28]	; (8007248 <prvResetNextTaskUnblockTime+0x38>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a04      	ldr	r2, [pc, #16]	; (800724c <prvResetNextTaskUnblockTime+0x3c>)
 800723a:	6013      	str	r3, [r2, #0]
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	20000654 	.word	0x20000654
 800724c:	200006bc 	.word	0x200006bc

08007250 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800725a:	4b29      	ldr	r3, [pc, #164]	; (8007300 <prvAddCurrentTaskToDelayedList+0xb0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007260:	4b28      	ldr	r3, [pc, #160]	; (8007304 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff fae1 	bl	800682e <uxListRemove>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	2201      	movs	r2, #1
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	43da      	mvns	r2, r3
 8007280:	4b21      	ldr	r3, [pc, #132]	; (8007308 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4013      	ands	r3, r2
 8007286:	4a20      	ldr	r2, [pc, #128]	; (8007308 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007288:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007290:	d10a      	bne.n	80072a8 <prvAddCurrentTaskToDelayedList+0x58>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d007      	beq.n	80072a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <prvAddCurrentTaskToDelayedList+0xb4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	481a      	ldr	r0, [pc, #104]	; (800730c <prvAddCurrentTaskToDelayedList+0xbc>)
 80072a2:	f7ff fa67 	bl	8006774 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072a6:	e026      	b.n	80072f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072b0:	4b14      	ldr	r3, [pc, #80]	; (8007304 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d209      	bcs.n	80072d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072c0:	4b13      	ldr	r3, [pc, #76]	; (8007310 <prvAddCurrentTaskToDelayedList+0xc0>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7ff fa75 	bl	80067bc <vListInsert>
}
 80072d2:	e010      	b.n	80072f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072d4:	4b0f      	ldr	r3, [pc, #60]	; (8007314 <prvAddCurrentTaskToDelayedList+0xc4>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	4b0a      	ldr	r3, [pc, #40]	; (8007304 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3304      	adds	r3, #4
 80072de:	4619      	mov	r1, r3
 80072e0:	4610      	mov	r0, r2
 80072e2:	f7ff fa6b 	bl	80067bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072e6:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d202      	bcs.n	80072f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80072f0:	4a09      	ldr	r2, [pc, #36]	; (8007318 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6013      	str	r3, [r2, #0]
}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200006a0 	.word	0x200006a0
 8007304:	2000059c 	.word	0x2000059c
 8007308:	200006a4 	.word	0x200006a4
 800730c:	20000688 	.word	0x20000688
 8007310:	20000658 	.word	0x20000658
 8007314:	20000654 	.word	0x20000654
 8007318:	200006bc 	.word	0x200006bc

0800731c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3b04      	subs	r3, #4
 800732c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3b04      	subs	r3, #4
 800733a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3b04      	subs	r3, #4
 800734a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800734c:	4a0c      	ldr	r2, [pc, #48]	; (8007380 <pxPortInitialiseStack+0x64>)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b14      	subs	r3, #20
 8007356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3b04      	subs	r3, #4
 8007362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f06f 0202 	mvn.w	r2, #2
 800736a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3b20      	subs	r3, #32
 8007370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007372:	68fb      	ldr	r3, [r7, #12]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	08007385 	.word	0x08007385

08007384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <prvTaskExitError+0x54>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007396:	d00a      	beq.n	80073ae <prvTaskExitError+0x2a>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	60fb      	str	r3, [r7, #12]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <prvTaskExitError+0x28>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	60bb      	str	r3, [r7, #8]
}
 80073c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073c2:	bf00      	nop
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0fc      	beq.n	80073c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	2000000c 	.word	0x2000000c
 80073dc:	00000000 	.word	0x00000000

080073e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <pxCurrentTCBConst2>)
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	6808      	ldr	r0, [r1, #0]
 80073e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	f380 8809 	msr	PSP, r0
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8811 	msr	BASEPRI, r0
 80073fa:	4770      	bx	lr
 80073fc:	f3af 8000 	nop.w

08007400 <pxCurrentTCBConst2>:
 8007400:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop

08007408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007408:	4808      	ldr	r0, [pc, #32]	; (800742c <prvPortStartFirstTask+0x24>)
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	6800      	ldr	r0, [r0, #0]
 800740e:	f380 8808 	msr	MSP, r0
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8814 	msr	CONTROL, r0
 800741a:	b662      	cpsie	i
 800741c:	b661      	cpsie	f
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	df00      	svc	0
 8007428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800742a:	bf00      	nop
 800742c:	e000ed08 	.word	0xe000ed08

08007430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007436:	4b46      	ldr	r3, [pc, #280]	; (8007550 <xPortStartScheduler+0x120>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a46      	ldr	r2, [pc, #280]	; (8007554 <xPortStartScheduler+0x124>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d10a      	bne.n	8007456 <xPortStartScheduler+0x26>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007456:	4b3e      	ldr	r3, [pc, #248]	; (8007550 <xPortStartScheduler+0x120>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a3f      	ldr	r2, [pc, #252]	; (8007558 <xPortStartScheduler+0x128>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10a      	bne.n	8007476 <xPortStartScheduler+0x46>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	60fb      	str	r3, [r7, #12]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007476:	4b39      	ldr	r3, [pc, #228]	; (800755c <xPortStartScheduler+0x12c>)
 8007478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	22ff      	movs	r2, #255	; 0xff
 8007486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007498:	b2da      	uxtb	r2, r3
 800749a:	4b31      	ldr	r3, [pc, #196]	; (8007560 <xPortStartScheduler+0x130>)
 800749c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800749e:	4b31      	ldr	r3, [pc, #196]	; (8007564 <xPortStartScheduler+0x134>)
 80074a0:	2207      	movs	r2, #7
 80074a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074a4:	e009      	b.n	80074ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074a6:	4b2f      	ldr	r3, [pc, #188]	; (8007564 <xPortStartScheduler+0x134>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	4a2d      	ldr	r2, [pc, #180]	; (8007564 <xPortStartScheduler+0x134>)
 80074ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c2:	2b80      	cmp	r3, #128	; 0x80
 80074c4:	d0ef      	beq.n	80074a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074c6:	4b27      	ldr	r3, [pc, #156]	; (8007564 <xPortStartScheduler+0x134>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f1c3 0307 	rsb	r3, r3, #7
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d00a      	beq.n	80074e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	60bb      	str	r3, [r7, #8]
}
 80074e4:	bf00      	nop
 80074e6:	e7fe      	b.n	80074e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074e8:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <xPortStartScheduler+0x134>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	4a1d      	ldr	r2, [pc, #116]	; (8007564 <xPortStartScheduler+0x134>)
 80074f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074f2:	4b1c      	ldr	r3, [pc, #112]	; (8007564 <xPortStartScheduler+0x134>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074fa:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <xPortStartScheduler+0x134>)
 80074fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	b2da      	uxtb	r2, r3
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007506:	4b18      	ldr	r3, [pc, #96]	; (8007568 <xPortStartScheduler+0x138>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a17      	ldr	r2, [pc, #92]	; (8007568 <xPortStartScheduler+0x138>)
 800750c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007512:	4b15      	ldr	r3, [pc, #84]	; (8007568 <xPortStartScheduler+0x138>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a14      	ldr	r2, [pc, #80]	; (8007568 <xPortStartScheduler+0x138>)
 8007518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800751c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800751e:	f000 f8dd 	bl	80076dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <xPortStartScheduler+0x13c>)
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007528:	f000 f8fc 	bl	8007724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800752c:	4b10      	ldr	r3, [pc, #64]	; (8007570 <xPortStartScheduler+0x140>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a0f      	ldr	r2, [pc, #60]	; (8007570 <xPortStartScheduler+0x140>)
 8007532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007538:	f7ff ff66 	bl	8007408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800753c:	f7ff fd4c 	bl	8006fd8 <vTaskSwitchContext>
	prvTaskExitError();
 8007540:	f7ff ff20 	bl	8007384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	e000ed00 	.word	0xe000ed00
 8007554:	410fc271 	.word	0x410fc271
 8007558:	410fc270 	.word	0x410fc270
 800755c:	e000e400 	.word	0xe000e400
 8007560:	200006c8 	.word	0x200006c8
 8007564:	200006cc 	.word	0x200006cc
 8007568:	e000ed20 	.word	0xe000ed20
 800756c:	2000000c 	.word	0x2000000c
 8007570:	e000ef34 	.word	0xe000ef34

08007574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	607b      	str	r3, [r7, #4]
}
 800758c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800758e:	4b0f      	ldr	r3, [pc, #60]	; (80075cc <vPortEnterCritical+0x58>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	4a0d      	ldr	r2, [pc, #52]	; (80075cc <vPortEnterCritical+0x58>)
 8007596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <vPortEnterCritical+0x58>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d10f      	bne.n	80075c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <vPortEnterCritical+0x5c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	603b      	str	r3, [r7, #0]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <vPortEnterCritical+0x4a>
	}
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	2000000c 	.word	0x2000000c
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075da:	4b12      	ldr	r3, [pc, #72]	; (8007624 <vPortExitCritical+0x50>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <vPortExitCritical+0x24>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	607b      	str	r3, [r7, #4]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <vPortExitCritical+0x50>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	4a09      	ldr	r2, [pc, #36]	; (8007624 <vPortExitCritical+0x50>)
 8007600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <vPortExitCritical+0x50>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <vPortExitCritical+0x42>
 800760a:	2300      	movs	r3, #0
 800760c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	2000000c 	.word	0x2000000c
	...

08007630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007630:	f3ef 8009 	mrs	r0, PSP
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	4b15      	ldr	r3, [pc, #84]	; (8007690 <pxCurrentTCBConst>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	f01e 0f10 	tst.w	lr, #16
 8007640:	bf08      	it	eq
 8007642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764a:	6010      	str	r0, [r2, #0]
 800764c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007654:	f380 8811 	msr	BASEPRI, r0
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f7ff fcba 	bl	8006fd8 <vTaskSwitchContext>
 8007664:	f04f 0000 	mov.w	r0, #0
 8007668:	f380 8811 	msr	BASEPRI, r0
 800766c:	bc09      	pop	{r0, r3}
 800766e:	6819      	ldr	r1, [r3, #0]
 8007670:	6808      	ldr	r0, [r1, #0]
 8007672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007676:	f01e 0f10 	tst.w	lr, #16
 800767a:	bf08      	it	eq
 800767c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007680:	f380 8809 	msr	PSP, r0
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	f3af 8000 	nop.w

08007690 <pxCurrentTCBConst>:
 8007690:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop

08007698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	607b      	str	r3, [r7, #4]
}
 80076b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076b2:	f7ff fbd9 	bl	8006e68 <xTaskIncrementTick>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <SysTick_Handler+0x40>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f383 8811 	msr	BASEPRI, r3
}
 80076ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <vPortSetupTimerInterrupt+0x34>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <vPortSetupTimerInterrupt+0x38>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <vPortSetupTimerInterrupt+0x3c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a0a      	ldr	r2, [pc, #40]	; (800771c <vPortSetupTimerInterrupt+0x40>)
 80076f2:	fba2 2303 	umull	r2, r3, r2, r3
 80076f6:	099b      	lsrs	r3, r3, #6
 80076f8:	4a09      	ldr	r2, [pc, #36]	; (8007720 <vPortSetupTimerInterrupt+0x44>)
 80076fa:	3b01      	subs	r3, #1
 80076fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076fe:	4b04      	ldr	r3, [pc, #16]	; (8007710 <vPortSetupTimerInterrupt+0x34>)
 8007700:	2207      	movs	r2, #7
 8007702:	601a      	str	r2, [r3, #0]
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	e000e010 	.word	0xe000e010
 8007714:	e000e018 	.word	0xe000e018
 8007718:	20000000 	.word	0x20000000
 800771c:	10624dd3 	.word	0x10624dd3
 8007720:	e000e014 	.word	0xe000e014

08007724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007734 <vPortEnableVFP+0x10>
 8007728:	6801      	ldr	r1, [r0, #0]
 800772a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800772e:	6001      	str	r1, [r0, #0]
 8007730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007732:	bf00      	nop
 8007734:	e000ed88 	.word	0xe000ed88

08007738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007744:	f7ff fae6 	bl	8006d14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007748:	4b5b      	ldr	r3, [pc, #364]	; (80078b8 <pvPortMalloc+0x180>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007750:	f000 f920 	bl	8007994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007754:	4b59      	ldr	r3, [pc, #356]	; (80078bc <pvPortMalloc+0x184>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 8093 	bne.w	8007888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01d      	beq.n	80077a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007768:	2208      	movs	r2, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b00      	cmp	r3, #0
 8007778:	d014      	beq.n	80077a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	3308      	adds	r3, #8
 8007782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <pvPortMalloc+0x6c>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d06e      	beq.n	8007888 <pvPortMalloc+0x150>
 80077aa:	4b45      	ldr	r3, [pc, #276]	; (80078c0 <pvPortMalloc+0x188>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d869      	bhi.n	8007888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077b4:	4b43      	ldr	r3, [pc, #268]	; (80078c4 <pvPortMalloc+0x18c>)
 80077b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077b8:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <pvPortMalloc+0x18c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077be:	e004      	b.n	80077ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d903      	bls.n	80077dc <pvPortMalloc+0xa4>
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f1      	bne.n	80077c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077dc:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <pvPortMalloc+0x180>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d050      	beq.n	8007888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2208      	movs	r2, #8
 80077ec:	4413      	add	r3, r2
 80077ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	2308      	movs	r3, #8
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	d91f      	bls.n	8007848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <pvPortMalloc+0xf8>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	613b      	str	r3, [r7, #16]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007842:	69b8      	ldr	r0, [r7, #24]
 8007844:	f000 f908 	bl	8007a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007848:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <pvPortMalloc+0x188>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <pvPortMalloc+0x188>)
 8007854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <pvPortMalloc+0x188>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <pvPortMalloc+0x190>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d203      	bcs.n	800786a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <pvPortMalloc+0x188>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <pvPortMalloc+0x190>)
 8007868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <pvPortMalloc+0x184>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	431a      	orrs	r2, r3
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <pvPortMalloc+0x194>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <pvPortMalloc+0x194>)
 8007886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007888:	f7ff fa52 	bl	8006d30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <pvPortMalloc+0x174>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	60fb      	str	r3, [r7, #12]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <pvPortMalloc+0x172>
	return pvReturn;
 80078ac:	69fb      	ldr	r3, [r7, #28]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3728      	adds	r7, #40	; 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20001290 	.word	0x20001290
 80078bc:	200012a4 	.word	0x200012a4
 80078c0:	20001294 	.word	0x20001294
 80078c4:	20001288 	.word	0x20001288
 80078c8:	20001298 	.word	0x20001298
 80078cc:	2000129c 	.word	0x2000129c

080078d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d04d      	beq.n	800797e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078e2:	2308      	movs	r3, #8
 80078e4:	425b      	negs	r3, r3
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4413      	add	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4b24      	ldr	r3, [pc, #144]	; (8007988 <vPortFree+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <vPortFree+0x44>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <vPortFree+0x62>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60bb      	str	r3, [r7, #8]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <vPortFree+0xb8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01e      	beq.n	800797e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11a      	bne.n	800797e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <vPortFree+0xb8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	43db      	mvns	r3, r3
 8007952:	401a      	ands	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007958:	f7ff f9dc 	bl	8006d14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vPortFree+0xbc>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4413      	add	r3, r2
 8007966:	4a09      	ldr	r2, [pc, #36]	; (800798c <vPortFree+0xbc>)
 8007968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800796a:	6938      	ldr	r0, [r7, #16]
 800796c:	f000 f874 	bl	8007a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <vPortFree+0xc0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a06      	ldr	r2, [pc, #24]	; (8007990 <vPortFree+0xc0>)
 8007978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800797a:	f7ff f9d9 	bl	8006d30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800797e:	bf00      	nop
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200012a4 	.word	0x200012a4
 800798c:	20001294 	.word	0x20001294
 8007990:	200012a0 	.word	0x200012a0

08007994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800799a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800799e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <prvHeapInit+0xac>)
 80079a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3307      	adds	r3, #7
 80079b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <prvHeapInit+0xac>)
 80079c4:	4413      	add	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <prvHeapInit+0xb0>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <prvHeapInit+0xb0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4413      	add	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079e0:	2208      	movs	r2, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <prvHeapInit+0xb4>)
 80079f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <prvHeapInit+0xb4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079fe:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvHeapInit+0xb4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvHeapInit+0xb4>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <prvHeapInit+0xb8>)
 8007a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <prvHeapInit+0xbc>)
 8007a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <prvHeapInit+0xc0>)
 8007a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a32:	601a      	str	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200006d0 	.word	0x200006d0
 8007a44:	20001288 	.word	0x20001288
 8007a48:	20001290 	.word	0x20001290
 8007a4c:	20001298 	.word	0x20001298
 8007a50:	20001294 	.word	0x20001294
 8007a54:	200012a4 	.word	0x200012a4

08007a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a60:	4b28      	ldr	r3, [pc, #160]	; (8007b04 <prvInsertBlockIntoFreeList+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e002      	b.n	8007a6c <prvInsertBlockIntoFreeList+0x14>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8f7      	bhi.n	8007a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d108      	bne.n	8007a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d118      	bne.n	8007ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d00d      	beq.n	8007ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e008      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e003      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d002      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20001288 	.word	0x20001288
 8007b08:	20001290 	.word	0x20001290

08007b0c <__libc_init_array>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4d0d      	ldr	r5, [pc, #52]	; (8007b44 <__libc_init_array+0x38>)
 8007b10:	4c0d      	ldr	r4, [pc, #52]	; (8007b48 <__libc_init_array+0x3c>)
 8007b12:	1b64      	subs	r4, r4, r5
 8007b14:	10a4      	asrs	r4, r4, #2
 8007b16:	2600      	movs	r6, #0
 8007b18:	42a6      	cmp	r6, r4
 8007b1a:	d109      	bne.n	8007b30 <__libc_init_array+0x24>
 8007b1c:	4d0b      	ldr	r5, [pc, #44]	; (8007b4c <__libc_init_array+0x40>)
 8007b1e:	4c0c      	ldr	r4, [pc, #48]	; (8007b50 <__libc_init_array+0x44>)
 8007b20:	f000 f8e4 	bl	8007cec <_init>
 8007b24:	1b64      	subs	r4, r4, r5
 8007b26:	10a4      	asrs	r4, r4, #2
 8007b28:	2600      	movs	r6, #0
 8007b2a:	42a6      	cmp	r6, r4
 8007b2c:	d105      	bne.n	8007b3a <__libc_init_array+0x2e>
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b34:	4798      	blx	r3
 8007b36:	3601      	adds	r6, #1
 8007b38:	e7ee      	b.n	8007b18 <__libc_init_array+0xc>
 8007b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3e:	4798      	blx	r3
 8007b40:	3601      	adds	r6, #1
 8007b42:	e7f2      	b.n	8007b2a <__libc_init_array+0x1e>
 8007b44:	08007e0c 	.word	0x08007e0c
 8007b48:	08007e0c 	.word	0x08007e0c
 8007b4c:	08007e0c 	.word	0x08007e0c
 8007b50:	08007e10 	.word	0x08007e10

08007b54 <__retarget_lock_acquire_recursive>:
 8007b54:	4770      	bx	lr

08007b56 <__retarget_lock_release_recursive>:
 8007b56:	4770      	bx	lr

08007b58 <memset>:
 8007b58:	4402      	add	r2, r0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d100      	bne.n	8007b62 <memset+0xa>
 8007b60:	4770      	bx	lr
 8007b62:	f803 1b01 	strb.w	r1, [r3], #1
 8007b66:	e7f9      	b.n	8007b5c <memset+0x4>

08007b68 <cleanup_glue>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	6809      	ldr	r1, [r1, #0]
 8007b6e:	4605      	mov	r5, r0
 8007b70:	b109      	cbz	r1, 8007b76 <cleanup_glue+0xe>
 8007b72:	f7ff fff9 	bl	8007b68 <cleanup_glue>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7e:	f000 b869 	b.w	8007c54 <_free_r>
	...

08007b84 <_reclaim_reent>:
 8007b84:	4b2c      	ldr	r3, [pc, #176]	; (8007c38 <_reclaim_reent+0xb4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4283      	cmp	r3, r0
 8007b8a:	b570      	push	{r4, r5, r6, lr}
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	d051      	beq.n	8007c34 <_reclaim_reent+0xb0>
 8007b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b92:	b143      	cbz	r3, 8007ba6 <_reclaim_reent+0x22>
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d14a      	bne.n	8007c30 <_reclaim_reent+0xac>
 8007b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b9c:	6819      	ldr	r1, [r3, #0]
 8007b9e:	b111      	cbz	r1, 8007ba6 <_reclaim_reent+0x22>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 f857 	bl	8007c54 <_free_r>
 8007ba6:	6961      	ldr	r1, [r4, #20]
 8007ba8:	b111      	cbz	r1, 8007bb0 <_reclaim_reent+0x2c>
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 f852 	bl	8007c54 <_free_r>
 8007bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bb2:	b111      	cbz	r1, 8007bba <_reclaim_reent+0x36>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 f84d 	bl	8007c54 <_free_r>
 8007bba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bbc:	b111      	cbz	r1, 8007bc4 <_reclaim_reent+0x40>
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 f848 	bl	8007c54 <_free_r>
 8007bc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007bc6:	b111      	cbz	r1, 8007bce <_reclaim_reent+0x4a>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 f843 	bl	8007c54 <_free_r>
 8007bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bd0:	b111      	cbz	r1, 8007bd8 <_reclaim_reent+0x54>
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f83e 	bl	8007c54 <_free_r>
 8007bd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007bda:	b111      	cbz	r1, 8007be2 <_reclaim_reent+0x5e>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 f839 	bl	8007c54 <_free_r>
 8007be2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007be4:	b111      	cbz	r1, 8007bec <_reclaim_reent+0x68>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 f834 	bl	8007c54 <_free_r>
 8007bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bee:	b111      	cbz	r1, 8007bf6 <_reclaim_reent+0x72>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 f82f 	bl	8007c54 <_free_r>
 8007bf6:	69a3      	ldr	r3, [r4, #24]
 8007bf8:	b1e3      	cbz	r3, 8007c34 <_reclaim_reent+0xb0>
 8007bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4798      	blx	r3
 8007c00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c02:	b1b9      	cbz	r1, 8007c34 <_reclaim_reent+0xb0>
 8007c04:	4620      	mov	r0, r4
 8007c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c0a:	f7ff bfad 	b.w	8007b68 <cleanup_glue>
 8007c0e:	5949      	ldr	r1, [r1, r5]
 8007c10:	b941      	cbnz	r1, 8007c24 <_reclaim_reent+0xa0>
 8007c12:	3504      	adds	r5, #4
 8007c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c16:	2d80      	cmp	r5, #128	; 0x80
 8007c18:	68d9      	ldr	r1, [r3, #12]
 8007c1a:	d1f8      	bne.n	8007c0e <_reclaim_reent+0x8a>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 f819 	bl	8007c54 <_free_r>
 8007c22:	e7ba      	b.n	8007b9a <_reclaim_reent+0x16>
 8007c24:	680e      	ldr	r6, [r1, #0]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f814 	bl	8007c54 <_free_r>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	e7ef      	b.n	8007c10 <_reclaim_reent+0x8c>
 8007c30:	2500      	movs	r5, #0
 8007c32:	e7ef      	b.n	8007c14 <_reclaim_reent+0x90>
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	bf00      	nop
 8007c38:	20000010 	.word	0x20000010

08007c3c <__malloc_lock>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__malloc_lock+0x8>)
 8007c3e:	f7ff bf89 	b.w	8007b54 <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	200012a8 	.word	0x200012a8

08007c48 <__malloc_unlock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_unlock+0x8>)
 8007c4a:	f7ff bf84 	b.w	8007b56 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	200012a8 	.word	0x200012a8

08007c54 <_free_r>:
 8007c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c56:	2900      	cmp	r1, #0
 8007c58:	d044      	beq.n	8007ce4 <_free_r+0x90>
 8007c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5e:	9001      	str	r0, [sp, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f1a1 0404 	sub.w	r4, r1, #4
 8007c66:	bfb8      	it	lt
 8007c68:	18e4      	addlt	r4, r4, r3
 8007c6a:	f7ff ffe7 	bl	8007c3c <__malloc_lock>
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <_free_r+0x94>)
 8007c70:	9801      	ldr	r0, [sp, #4]
 8007c72:	6813      	ldr	r3, [r2, #0]
 8007c74:	b933      	cbnz	r3, 8007c84 <_free_r+0x30>
 8007c76:	6063      	str	r3, [r4, #4]
 8007c78:	6014      	str	r4, [r2, #0]
 8007c7a:	b003      	add	sp, #12
 8007c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c80:	f7ff bfe2 	b.w	8007c48 <__malloc_unlock>
 8007c84:	42a3      	cmp	r3, r4
 8007c86:	d908      	bls.n	8007c9a <_free_r+0x46>
 8007c88:	6825      	ldr	r5, [r4, #0]
 8007c8a:	1961      	adds	r1, r4, r5
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	bf01      	itttt	eq
 8007c90:	6819      	ldreq	r1, [r3, #0]
 8007c92:	685b      	ldreq	r3, [r3, #4]
 8007c94:	1949      	addeq	r1, r1, r5
 8007c96:	6021      	streq	r1, [r4, #0]
 8007c98:	e7ed      	b.n	8007c76 <_free_r+0x22>
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	b10b      	cbz	r3, 8007ca4 <_free_r+0x50>
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	d9fa      	bls.n	8007c9a <_free_r+0x46>
 8007ca4:	6811      	ldr	r1, [r2, #0]
 8007ca6:	1855      	adds	r5, r2, r1
 8007ca8:	42a5      	cmp	r5, r4
 8007caa:	d10b      	bne.n	8007cc4 <_free_r+0x70>
 8007cac:	6824      	ldr	r4, [r4, #0]
 8007cae:	4421      	add	r1, r4
 8007cb0:	1854      	adds	r4, r2, r1
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	6011      	str	r1, [r2, #0]
 8007cb6:	d1e0      	bne.n	8007c7a <_free_r+0x26>
 8007cb8:	681c      	ldr	r4, [r3, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	6053      	str	r3, [r2, #4]
 8007cbe:	4421      	add	r1, r4
 8007cc0:	6011      	str	r1, [r2, #0]
 8007cc2:	e7da      	b.n	8007c7a <_free_r+0x26>
 8007cc4:	d902      	bls.n	8007ccc <_free_r+0x78>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	6003      	str	r3, [r0, #0]
 8007cca:	e7d6      	b.n	8007c7a <_free_r+0x26>
 8007ccc:	6825      	ldr	r5, [r4, #0]
 8007cce:	1961      	adds	r1, r4, r5
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	bf04      	itt	eq
 8007cd4:	6819      	ldreq	r1, [r3, #0]
 8007cd6:	685b      	ldreq	r3, [r3, #4]
 8007cd8:	6063      	str	r3, [r4, #4]
 8007cda:	bf04      	itt	eq
 8007cdc:	1949      	addeq	r1, r1, r5
 8007cde:	6021      	streq	r1, [r4, #0]
 8007ce0:	6054      	str	r4, [r2, #4]
 8007ce2:	e7ca      	b.n	8007c7a <_free_r+0x26>
 8007ce4:	b003      	add	sp, #12
 8007ce6:	bd30      	pop	{r4, r5, pc}
 8007ce8:	200012ac 	.word	0x200012ac

08007cec <_init>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	bf00      	nop
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr

08007cf8 <_fini>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr
